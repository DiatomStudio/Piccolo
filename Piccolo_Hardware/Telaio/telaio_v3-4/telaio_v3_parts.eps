%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: TelaioCutPattern.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Tiago
%%CreationDate: 12/18/2013
%%BoundingBox: 0 0 571 607
%%HiResBoundingBox: 0 0 570.0284 606.5586
%%CropBox: 0 0 570.0284 606.5586
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.351735, 2008/07/22-18:11:12        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2013-12-18T22:50:46Z</xmp:CreateDate>
         <xmp:MetadataDate>2013-12-18T22:50:47Z</xmp:MetadataDate>
         <xmp:ModifyDate>2013-12-18T22:50:47Z</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>244</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD0AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q8C/Pr/nJW18nzS+X&#xA;fLJivdcKul1dI8UsVtyWaFgGjkcpcwTohMcsdKdcVfKXmL80fP8A5iuZZ9V1y6mM3rcolkZIgtzG&#xA;sU6KikKEkSMAoPh9t8VRWgfnJ+ZmgzPNpuv3SSSNLK/qsJgZZ0SN5GWUOrNwhUKWBpTbFX2D+SH/&#xA;ADkJpH5iI2nagsWm+Y05N9U5xpHKGeVkjtlklaaZ0gi5SEJQe2KvUtZ1rS9F02bUtUuobOygA5z3&#xA;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&#xA;xV2KuxV2KuxV2KuxV2Kv/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>20.999993</stDim:w>
            <stDim:h>29.699996</stDim:h>
            <stDim:unit>Centimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>AutoCAD Color</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>0</xmpG:red>
                           <xmpG:green>0</xmpG:green>
                           <xmpG:blue>0</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">TelaioCutPattern</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DocumentID>xmp.did:06E165270368E311AD70A5DD51851BD8</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:06E165270368E311AD70A5DD51851BD8</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F77F1174072068118C14C7D3448D1807</xmpMM:OriginalDocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:5a9fded8-22b6-9041-a6e9-27e199c87fac</stRef:instanceID>
            <stRef:documentID>xmp.did:F97F1174072068118C14C7D3448D1807</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:F77F1174072068118C14C7D3448D1807</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118C14C7D3448D1807</stEvt:instanceID>
                  <stEvt:when>2012-04-22T02:14:16+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F1174072068118C14C7D3448D1807</stEvt:instanceID>
                  <stEvt:when>2012-04-23T11:57:11+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:06E165270368E311AD70A5DD51851BD8</stEvt:instanceID>
                  <stEvt:when>2013-12-18T22:50:47Z</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.90</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -606.559 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 606.559 li
570.028 606.559 li
570.028 0 li
cp
clp
[1 0 0 1 0 0 ]ct
286.259 184.828 mo
283.91 184.828 282.007 182.925 282.007 180.576 cv
282.007 178.229 283.91 176.324 286.259 176.324 cv
288.606 176.324 290.511 178.229 290.511 180.576 cv
290.511 182.925 288.606 184.828 286.259 184.828 cv
cp
286.259 326.79 mo
283.91 326.79 282.007 324.886 282.007 322.538 cv
282.007 320.189 283.91 318.286 286.259 318.286 cv
288.606 318.286 290.511 320.189 290.511 322.538 cv
290.511 324.886 288.606 326.79 286.259 326.79 cv
cp
302.11 133.901 mo
302.11 132.187 li
298.968 130.711 li
283.055 130.711 li
279.924 130.711 277.386 133.249 277.386 136.381 cv
277.386 326.262 li
277.386 329.393 279.924 331.931 283.055 331.931 cv
299.269 331.931 li
299.269 331.403 li
302.11 330.067 li
302.11 328.354 li
298.968 326.877 li
298.968 325.21 li
302.11 323.733 li
302.11 322.02 li
298.968 320.543 li
298.968 318.876 li
302.11 317.4 li
302.11 315.733 li
298.968 314.208 li
298.968 312.541 li
302.11 311.066 li
302.11 309.399 li
298.968 307.875 li
298.968 306.208 li
302.11 304.731 li
302.11 303.064 li
298.968 301.541 li
298.968 299.874 li
302.11 298.396 li
302.11 296.73 li
298.968 295.255 li
298.968 293.588 li
302.11 292.063 li
302.11 290.396 li
298.968 288.921 li
298.968 287.254 li
302.11 285.729 li
302.11 284.063 li
298.968 282.586 li
298.968 280.919 li
302.11 279.396 li
302.11 277.729 li
298.968 276.251 li
298.968 274.584 li
302.11 273.109 li
302.11 271.442 li
298.968 269.917 li
298.968 268.25 li
302.11 266.775 li
302.11 265.06 li
298.968 263.584 li
298.968 261.917 li
302.11 260.439 li
302.11 258.726 li
298.968 257.25 li
298.968 255.583 li
302.11 254.105 li
302.11 252.393 li
298.968 250.963 li
298.968 249.248 li
302.11 247.771 li
302.11 246.104 li
298.968 244.629 li
298.968 242.914 li
302.11 241.438 li
302.11 239.771 li
298.968 238.294 li
298.968 236.58 li
302.11 235.104 li
302.11 233.438 li
298.968 231.96 li
298.968 230.246 li
302.11 228.817 li
302.11 227.103 li
298.968 225.626 li
298.968 223.959 li
302.11 222.483 li
302.11 220.769 li
298.968 219.293 li
298.968 217.626 li
302.11 216.148 li
302.11 214.434 li
298.968 212.959 li
298.968 211.292 li
302.11 209.814 li
302.11 208.101 li
298.968 206.672 li
298.968 204.957 li
302.11 203.48 li
302.11 201.813 li
298.968 200.338 li
298.968 198.623 li
302.11 197.147 li
302.11 195.48 li
298.968 194.003 li
298.968 192.288 li
302.11 190.813 li
302.11 189.146 li
298.968 187.669 li
298.968 185.955 li
302.11 184.526 li
302.11 182.811 li
298.968 181.335 li
298.968 179.668 li
302.11 178.192 li
302.11 176.477 li
298.968 175.002 li
298.968 173.335 li
302.11 171.857 li
302.11 170.143 li
298.968 168.667 li
298.968 167 li
302.11 165.523 li
302.11 163.81 li
298.968 162.381 li
298.968 160.665 li
302.11 159.189 li
302.11 157.522 li
298.968 156.047 li
298.968 154.332 li
302.11 152.856 li
302.11 151.189 li
298.968 149.713 li
298.968 147.999 li
302.11 146.57 li
302.11 144.854 li
298.968 143.379 li
298.968 141.712 li
302.11 140.236 li
302.11 138.521 li
298.968 137.045 li
298.968 135.379 li
302.11 133.901 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
f
321.771 188.004 mo
319.423 188.004 317.52 186.101 317.52 183.752 cv
317.52 181.404 319.423 179.5 321.771 179.5 cv
324.12 179.5 326.023 181.404 326.023 183.752 cv
326.023 186.101 324.12 188.004 321.771 188.004 cv
cp
321.723 329.965 mo
319.374 329.965 317.471 328.062 317.471 325.713 cv
317.471 323.365 319.374 321.461 321.723 321.461 cv
324.071 321.461 325.975 323.365 325.975 325.713 cv
325.975 328.062 324.071 329.965 321.723 329.965 cv
cp
325.061 133.865 mo
312.899 133.865 li
309.769 133.865 307.23 136.403 307.23 139.534 cv
307.23 335.085 li
325.061 335.085 li
328.191 335.085 330.729 332.547 330.729 329.416 cv
330.729 139.534 li
330.729 136.403 328.191 133.865 325.061 133.865 cv
cp
f
361.088 212.617 mo
358.739 212.617 356.836 210.713 356.836 208.365 cv
356.836 206.017 358.739 204.113 361.088 204.113 cv
363.437 204.113 365.34 206.017 365.34 208.365 cv
365.34 210.713 363.437 212.617 361.088 212.617 cv
cp
361.039 354.578 mo
358.69 354.578 356.787 352.675 356.787 350.326 cv
356.787 347.978 358.69 346.074 361.039 346.074 cv
363.388 346.074 365.291 347.978 365.291 350.326 cv
365.291 352.675 363.388 354.578 361.039 354.578 cv
cp
235.788 212.596 mo
233.44 212.596 231.536 210.691 231.536 208.344 cv
231.536 205.995 233.44 204.092 235.788 204.092 cv
238.137 204.092 240.04 205.995 240.04 208.344 cv
240.04 210.691 238.137 212.596 235.788 212.596 cv
cp
235.788 354.557 mo
233.44 354.557 231.536 352.652 231.536 350.305 cv
231.536 347.956 233.44 346.053 235.788 346.053 cv
238.137 346.053 240.04 347.956 240.04 350.305 cv
240.04 352.652 238.137 354.557 235.788 354.557 cv
cp
346.547 215.756 mo
346.547 333.62 li
346.547 336.751 344.009 339.289 340.878 339.289 cv
256.089 339.289 li
252.957 339.289 250.419 336.751 250.419 333.62 cv
250.419 215.756 li
250.419 201.97 240.499 190.182 226.915 187.826 cv
226.915 354.028 li
226.915 357.159 229.454 359.697 232.585 359.697 cv
364.377 359.697 li
367.508 359.697 370.046 357.159 370.046 354.028 cv
370.046 187.827 li
356.464 190.185 346.547 201.971 346.547 215.756 cv
cp
f
400.567 264.403 mo
400.567 262.055 402.472 260.151 404.819 260.151 cv
407.168 260.151 409.071 262.055 409.071 264.403 cv
409.071 266.752 407.168 268.655 404.819 268.655 cv
402.472 268.655 400.567 266.752 400.567 264.403 cv
cp
400.567 250.197 mo
400.567 225.768 li
409.071 225.768 li
409.071 250.197 li
400.567 250.197 li
cp
400.567 211.521 mo
400.567 209.172 402.472 207.269 404.819 207.269 cv
407.168 207.269 409.071 209.172 409.071 211.521 cv
409.071 213.868 407.168 215.772 404.819 215.772 cv
402.472 215.772 400.567 213.868 400.567 211.521 cv
cp
399.004 345.342 mo
399.004 275.742 li
411.906 275.742 li
415.038 275.742 417.575 273.203 417.575 270.072 cv
417.575 205.851 li
417.575 202.72 415.038 200.182 411.906 200.182 cv
399.005 200.182 li
399.005 130.856 li
399.005 123.836 393.956 117.831 387.04 116.624 cv
387.04 359.342 li
393.93 358.254 399.004 352.316 399.004 345.342 cv
cp
f
49.1294 170.533 mo
49.1294 172.882 47.2261 174.785 44.8774 174.785 cv
42.5293 174.785 40.6255 172.882 40.6255 170.533 cv
40.6255 168.186 42.5293 166.281 44.8774 166.281 cv
47.2261 166.281 49.1294 168.186 49.1294 170.533 cv
cp
111.738 170.533 mo
111.738 172.882 109.834 174.785 107.486 174.785 cv
105.138 174.785 103.234 172.882 103.234 170.533 cv
103.234 168.186 105.138 166.281 107.486 166.281 cv
109.834 166.281 111.738 168.186 111.738 170.533 cv
cp
87.4053 223.347 mo
93.5161 230.063 93.0259 240.461 86.3096 246.572 cv
79.5938 252.683 69.1953 252.192 63.0845 245.477 cv
61.9897 244.272 60.4307 243.598 58.8042 243.623 cv
58.7095 243.624 58.6147 243.624 58.5205 243.623 cv
53.4331 243.545 49.3726 239.357 49.4507 234.27 cv
49.5288 229.183 53.7168 225.121 58.8042 225.2 cv
60.4307 225.225 61.9897 224.55 63.0845 223.347 cv
63.4321 222.965 63.7979 222.599 64.1802 222.251 cv
70.896 216.141 81.2944 216.631 87.4053 223.347 cv
cp
49.1294 298.417 mo
49.1294 300.766 47.2261 302.669 44.8774 302.669 cv
42.5293 302.669 40.6255 300.766 40.6255 298.417 cv
40.6255 296.068 42.5293 294.165 44.8774 294.165 cv
47.2261 294.165 49.1294 296.068 49.1294 298.417 cv
cp
111.738 298.417 mo
111.738 300.766 109.834 302.669 107.486 302.669 cv
105.138 302.669 103.234 300.766 103.234 298.417 cv
103.234 296.068 105.138 294.165 107.486 294.165 cv
109.834 294.165 111.738 296.068 111.738 298.417 cv
cp
24.8574 168.678 mo
24.8574 203.781 li
33.1421 203.781 li
33.1421 201.981 li
38.5278 201.981 li
38.5278 203.781 li
44.6997 203.781 li
44.6997 212.285 li
38.5278 212.285 li
38.5278 214.086 li
33.1421 214.086 li
33.1421 212.285 li
24.8574 212.285 li
24.8574 222.24 li
5.66943 222.24 li
2.53857 222.24 0 224.778 0 227.909 cv
0 241 li
0 244.131 2.53857 246.669 5.66943 246.669 cv
24.8574 246.669 li
24.8574 256.664 li
33.1421 256.664 li
33.1421 254.864 li
38.5278 254.864 li
38.5278 256.664 li
44.6997 256.664 li
44.6997 265.169 li
38.5278 265.169 li
38.5278 266.969 li
33.1421 266.969 li
33.1421 265.169 li
24.8574 265.169 li
24.8574 300.271 li
24.8574 303.403 27.3955 305.941 30.5264 305.941 cv
115.284 305.941 li
118.416 305.941 120.954 303.403 120.954 300.271 cv
120.954 168.678 li
120.954 165.547 118.416 163.009 115.284 163.009 cv
30.5264 163.009 li
27.3955 163.009 24.8574 165.547 24.8574 168.678 cv
cp
f
206.352 283.088 mo
204.003 283.088 202.1 281.184 202.1 278.836 cv
202.1 276.487 204.003 274.584 206.352 274.584 cv
208.7 274.584 210.604 276.487 210.604 278.836 cv
210.604 281.184 208.7 283.088 206.352 283.088 cv
cp
206.352 345.696 mo
204.003 345.696 202.1 343.792 202.1 341.444 cv
202.1 339.096 204.003 337.192 206.352 337.192 cv
208.7 337.192 210.604 339.096 210.604 341.444 cv
210.604 343.792 208.7 345.696 206.352 345.696 cv
cp
208.206 258.815 mo
199.703 258.815 li
199.703 354.912 li
208.206 354.912 li
211.338 354.912 213.876 352.373 213.876 349.242 cv
213.876 264.484 li
213.876 261.354 211.338 258.815 208.206 258.815 cv
cp
f
50.4956 324.406 mo
50.4956 326.755 48.5918 328.658 46.2437 328.658 cv
43.895 328.658 41.9917 326.755 41.9917 324.406 cv
41.9917 322.059 43.895 320.154 46.2437 320.154 cv
48.5918 320.154 50.4956 322.059 50.4956 324.406 cv
cp
113.104 324.406 mo
113.104 326.755 111.2 328.658 108.852 328.658 cv
106.503 328.658 104.6 326.755 104.6 324.406 cv
104.6 322.059 106.503 320.154 108.852 320.154 cv
111.2 320.154 113.104 322.059 113.104 324.406 cv
cp
26.2231 326.262 mo
26.2231 329.393 28.7612 331.931 31.8926 331.931 cv
116.65 331.931 li
119.781 331.931 122.319 329.393 122.319 326.262 cv
122.319 310.559 li
26.2231 310.559 li
26.2231 326.262 li
cp
f
165.197 283.088 mo
162.848 283.088 160.945 281.184 160.945 278.836 cv
160.945 276.487 162.848 274.584 165.197 274.584 cv
167.545 274.584 169.449 276.487 169.449 278.836 cv
169.449 281.184 167.545 283.088 165.197 283.088 cv
cp
165.197 345.696 mo
162.848 345.696 160.945 343.792 160.945 341.444 cv
160.945 339.096 162.848 337.192 165.197 337.192 cv
167.545 337.192 169.449 339.096 169.449 341.444 cv
169.449 343.792 167.545 345.696 165.197 345.696 cv
cp
167.052 258.815 mo
151.349 258.815 li
151.349 354.912 li
167.052 354.912 li
170.183 354.912 172.721 352.373 172.721 349.242 cv
172.721 264.484 li
172.721 261.354 170.183 258.815 167.052 258.815 cv
cp
f
187.654 283.088 mo
185.306 283.088 183.402 281.184 183.402 278.836 cv
183.402 276.487 185.306 274.584 187.654 274.584 cv
190.002 274.584 191.906 276.487 191.906 278.836 cv
191.906 281.184 190.002 283.088 187.654 283.088 cv
cp
187.654 345.696 mo
185.306 345.696 183.402 343.792 183.402 341.444 cv
183.402 339.096 185.306 337.192 187.654 337.192 cv
190.002 337.192 191.906 339.096 191.906 341.444 cv
191.906 343.792 190.002 345.696 187.654 345.696 cv
cp
185.799 258.815 mo
182.667 258.815 180.129 261.354 180.129 264.484 cv
180.129 349.242 li
180.129 352.373 182.667 354.912 185.799 354.912 cv
194.303 354.912 li
194.303 258.815 li
185.799 258.815 li
cp
f
136.569 310.709 mo
138.917 310.709 140.821 312.612 140.821 314.961 cv
140.821 317.31 138.917 319.213 136.569 319.213 cv
134.221 319.213 132.317 317.31 132.317 314.961 cv
132.317 312.612 134.221 310.709 136.569 310.709 cv
cp
136.569 168.748 mo
138.917 168.748 140.821 170.651 140.821 173 cv
140.821 175.348 138.917 177.252 136.569 177.252 cv
134.221 177.252 132.317 175.348 132.317 173 cv
132.317 170.651 134.221 168.748 136.569 168.748 cv
cp
261.87 310.709 mo
264.218 310.709 266.122 312.612 266.122 314.961 cv
266.122 317.31 264.218 319.213 261.87 319.213 cv
259.521 319.213 257.618 317.31 257.618 314.961 cv
257.618 312.612 259.521 310.709 261.87 310.709 cv
cp
261.87 168.748 mo
264.218 168.748 266.122 170.651 266.122 173 cv
266.122 175.348 264.218 177.252 261.87 177.252 cv
259.521 177.252 257.618 175.348 257.618 173 cv
257.618 170.651 259.521 168.748 261.87 168.748 cv
cp
137.075 335.036 mo
140.206 335.036 142.744 332.498 142.744 329.367 cv
142.744 177.361 li
142.744 174.792 144.828 172.709 147.397 172.709 cv
251.091 172.709 li
253.66 172.709 255.743 174.792 255.743 177.361 cv
255.743 329.367 li
255.743 332.498 258.281 335.036 261.412 335.036 cv
270.743 335.036 li
270.743 169.275 li
270.743 166.145 268.204 163.606 265.073 163.606 cv
133.281 163.606 li
130.15 163.606 127.612 166.145 127.612 169.275 cv
127.612 335.036 li
137.075 335.036 li
cp
f
253.042 144.554 mo
42.5347 144.554 li
39.0122 144.554 36.1567 141.698 36.1567 138.176 cv
36.1567 134.653 39.0122 131.798 42.5347 131.798 cv
253.042 131.798 li
256.565 131.798 259.421 134.653 259.421 138.176 cv
259.421 141.698 256.565 144.554 253.042 144.554 cv
cp
121.347 107.558 mo
123.695 107.558 125.599 109.461 125.599 111.81 cv
125.599 114.157 123.695 116.062 121.347 116.062 cv
118.999 116.062 117.095 114.157 117.095 111.81 cv
117.095 109.461 118.999 107.558 121.347 107.558 cv
cp
135.595 107.558 mo
160.024 107.558 li
160.024 116.062 li
135.595 116.062 li
135.595 107.558 li
cp
174.23 107.558 mo
176.578 107.558 178.482 109.461 178.482 111.81 cv
178.482 114.157 176.578 116.062 174.23 116.062 cv
171.882 116.062 169.978 114.157 169.978 111.81 cv
169.978 109.461 171.882 107.558 174.23 107.558 cv
cp
269.341 151.318 mo
269.341 131.798 li
269.341 123.971 262.996 117.625 255.169 117.625 cv
185.568 117.625 li
185.568 104.723 li
185.568 101.592 183.03 99.0537 179.899 99.0537 cv
115.678 99.0537 li
112.546 99.0537 110.008 101.592 110.008 104.723 cv
110.008 117.625 li
40.6831 117.625 li
32.7041 117.625 26.2354 124.094 26.2354 132.072 cv
26.2354 150.946 li
26.1499 152.242 26.5127 153.529 27.2627 154.59 cv
27.4292 154.826 li
34.6929 154.826 li
36.2178 157.969 li
37.8848 157.969 li
39.3599 154.826 li
41.0269 154.826 li
42.5508 157.969 li
44.2178 157.969 li
45.6953 154.826 li
47.3618 154.826 li
48.8384 157.969 li
50.5518 157.969 li
52.0293 154.826 li
53.6963 154.826 li
55.1714 157.969 li
56.8384 157.969 li
58.3633 154.826 li
60.0303 154.826 li
61.5059 157.969 li
63.1724 157.969 li
64.6963 154.826 li
66.3633 154.826 li
67.8408 157.969 li
69.5073 157.969 li
71.0308 154.826 li
72.6973 154.826 li
74.1748 157.969 li
75.8418 157.969 li
77.3174 154.826 li
78.9839 154.826 li
80.5088 157.969 li
82.1758 157.969 li
83.6514 154.826 li
85.3179 154.826 li
86.8423 157.969 li
88.5088 157.969 li
89.9863 154.826 li
91.6533 154.826 li
93.1763 157.969 li
94.8433 157.969 li
96.3203 154.826 li
97.9873 154.826 li
99.4629 157.969 li
101.129 157.969 li
102.655 154.826 li
104.321 154.826 li
105.797 157.969 li
107.512 157.969 li
108.988 154.826 li
110.655 154.826 li
112.132 157.969 li
113.847 157.969 li
115.322 154.826 li
116.989 154.826 li
118.466 157.969 li
120.18 157.969 li
121.608 154.826 li
123.324 154.826 li
124.8 157.969 li
126.467 157.969 li
127.942 154.826 li
129.658 154.826 li
131.133 157.969 li
132.8 157.969 li
134.277 154.826 li
135.992 154.826 li
137.467 157.969 li
139.134 157.969 li
140.612 154.826 li
142.325 154.826 li
143.754 157.969 li
145.469 157.969 li
146.946 154.826 li
148.613 154.826 li
150.088 157.969 li
151.804 157.969 li
153.279 154.826 li
154.946 154.826 li
156.423 157.969 li
158.138 157.969 li
159.613 154.826 li
161.28 154.826 li
162.757 157.969 li
164.471 157.969 li
165.899 154.826 li
167.615 154.826 li
169.091 157.969 li
170.758 157.969 li
172.234 154.826 li
173.949 154.826 li
175.425 157.969 li
177.091 157.969 li
178.569 154.826 li
180.283 154.826 li
181.759 157.969 li
183.426 157.969 li
184.903 154.826 li
186.617 154.826 li
188.045 157.969 li
189.761 157.969 li
191.237 154.826 li
192.904 154.826 li
194.379 157.969 li
196.095 157.969 li
197.57 154.826 li
199.237 154.826 li
200.714 157.969 li
202.429 157.969 li
203.904 154.826 li
205.571 154.826 li
207.049 157.969 li
208.763 157.969 li
210.19 154.826 li
211.906 154.826 li
213.383 157.969 li
215.05 157.969 li
216.524 154.826 li
218.24 154.826 li
219.716 157.969 li
221.383 157.969 li
222.86 154.826 li
224.575 154.826 li
226.05 157.969 li
227.717 157.969 li
229.194 154.826 li
230.907 154.826 li
232.337 157.969 li
234.052 157.969 li
235.528 154.826 li
237.195 154.826 li
238.671 157.969 li
240.386 157.969 li
241.861 154.826 li
243.528 154.826 li
245.006 157.969 li
246.72 157.969 li
248.196 154.826 li
249.862 154.826 li
251.338 157.969 li
253.005 157.969 li
254.481 154.826 li
256.196 154.826 li
257.672 157.969 li
259.339 157.969 li
260.816 154.826 li
260.825 154.493 li
269.163 154.493 li
269.296 153.44 269.354 152.379 269.341 151.318 cv
cp
f
211.714 195.174 mo
209.366 195.174 207.462 193.271 207.462 190.922 cv
207.462 188.574 209.366 186.67 211.714 186.67 cv
214.063 186.67 215.966 188.574 215.966 190.922 cv
215.966 193.271 214.063 195.174 211.714 195.174 cv
cp
201.643 213.032 mo
168.903 213.032 li
168.903 207.363 li
201.643 207.363 li
201.643 213.032 li
cp
158.832 195.174 mo
156.483 195.174 154.58 193.271 154.58 190.922 cv
154.58 188.574 156.483 186.67 158.832 186.67 cv
161.18 186.67 163.083 188.574 163.083 190.922 cv
163.083 193.271 161.18 195.174 158.832 195.174 cv
cp
173.079 186.67 mo
197.508 186.67 li
197.508 195.174 li
173.079 195.174 li
173.079 186.67 li
cp
217.384 178.166 mo
153.162 178.166 li
150.031 178.166 147.493 180.704 147.493 183.836 cv
147.493 248.018 li
147.493 251.148 150.031 253.687 153.162 253.687 cv
217.384 253.687 li
220.515 253.687 223.053 251.148 223.053 248.018 cv
223.053 183.836 li
223.053 180.704 220.515 178.166 217.384 178.166 cv
cp
f
561.07 212.344 mo
558.722 212.344 556.818 210.44 556.818 208.092 cv
556.818 205.744 558.722 203.84 561.07 203.84 cv
563.419 203.84 565.322 205.744 565.322 208.092 cv
565.322 210.44 563.419 212.344 561.07 212.344 cv
cp
561.021 354.305 mo
558.673 354.305 556.77 352.401 556.77 350.053 cv
556.77 347.705 558.673 345.801 561.021 345.801 cv
563.37 345.801 565.273 347.705 565.273 350.053 cv
565.273 352.401 563.37 354.305 561.021 354.305 cv
cp
435.771 212.322 mo
433.423 212.322 431.519 210.419 431.519 208.07 cv
431.519 205.723 433.423 203.818 435.771 203.818 cv
438.119 203.818 440.022 205.723 440.022 208.07 cv
440.022 210.419 438.119 212.322 435.771 212.322 cv
cp
435.771 354.284 mo
433.423 354.284 431.519 352.38 431.519 350.032 cv
431.519 347.684 433.423 345.78 435.771 345.78 cv
438.119 345.78 440.022 347.684 440.022 350.032 cv
440.022 352.38 438.119 354.284 435.771 354.284 cv
cp
564.359 158.205 mo
552.198 158.205 li
432.567 158.205 li
429.437 158.205 426.897 160.743 426.897 163.875 cv
426.897 353.756 li
426.897 356.887 429.437 359.425 432.567 359.425 cv
546.529 359.425 li
564.359 359.425 li
567.49 359.425 570.028 356.887 570.028 353.756 cv
570.028 163.874 li
570.028 160.743 567.49 158.205 564.359 158.205 cv
cp
f
375.316 461.133 mo
375.395 456.045 379.582 451.984 384.669 452.063 cv
386.296 452.088 387.854 451.414 388.95 450.211 cv
389.298 449.828 389.663 449.463 390.046 449.115 cv
396.762 443.004 407.16 443.494 413.271 450.211 cv
419.382 456.926 418.892 467.324 412.175 473.436 cv
405.459 479.547 395.062 479.055 388.95 472.34 cv
387.854 471.137 386.296 470.461 384.669 470.486 cv
384.575 470.488 384.48 470.488 384.386 470.486 cv
379.299 470.408 375.237 466.221 375.316 461.133 cv
cp
341.521 546.941 mo
345.14 546.941 li
346.729 523.527 364.92 504.643 388.259 502.18 cv
414.787 499.379 438.563 518.615 441.363 545.143 cv
444.198 545.143 li
447.329 545.143 449.867 542.605 449.867 539.475 cv
449.867 430.984 li
449.867 428.416 447.784 426.332 445.214 426.332 cv
341.521 426.332 li
338.952 426.332 336.868 428.416 336.868 430.984 cv
336.868 542.289 li
336.868 544.857 338.952 546.941 341.521 546.941 cv
cp
f
234.255 434.945 mo
234.255 434.162 234.89 433.527 235.673 433.527 cv
299.594 433.527 li
300.376 433.527 301.011 434.162 301.011 434.945 cv
301.011 464.992 li
301.011 465.775 300.376 466.408 299.594 466.408 cv
235.673 466.408 li
234.89 466.408 234.255 465.775 234.255 464.992 cv
234.255 434.945 li
cp
302.488 539.043 mo
302.41 544.131 298.223 548.191 293.136 548.113 cv
291.509 548.088 289.949 548.762 288.854 549.967 cv
288.507 550.348 288.142 550.713 287.759 551.063 cv
281.043 557.172 270.645 556.682 264.534 549.967 cv
258.423 543.25 258.913 532.852 265.63 526.74 cv
272.346 520.629 282.743 521.121 288.854 527.836 cv
289.949 529.039 291.509 529.715 293.136 529.689 cv
293.229 529.688 293.324 529.688 293.419 529.689 cv
298.506 529.768 302.566 533.955 302.488 539.043 cv
cp
290.978 600.842 mo
289.335 600.842 288.002 599.51 288.002 597.865 cv
288.002 596.221 289.335 594.889 290.978 594.889 cv
292.622 594.889 293.954 596.221 293.954 597.865 cv
293.954 599.51 292.622 600.842 290.978 600.842 cv
cp
262.6 600.842 mo
260.956 600.842 259.623 599.51 259.623 597.865 cv
259.623 596.221 260.956 594.889 262.6 594.889 cv
264.243 594.889 265.575 596.221 265.575 597.865 cv
265.575 599.51 264.243 600.842 262.6 600.842 cv
cp
199.332 606.559 mo
354.187 606.559 li
356.756 606.559 358.839 604.475 358.839 601.906 cv
358.839 582.865 li
358.839 580.295 356.756 578.211 354.187 578.211 cv
353.169 578.211 li
337.515 578.211 324.823 565.521 324.823 549.865 cv
324.823 432.002 li
324.823 428.871 322.284 426.332 319.153 426.332 cv
234.364 426.332 li
231.233 426.332 228.694 428.871 228.694 432.002 cv
228.694 549.865 li
228.694 565.521 216.004 578.211 200.349 578.211 cv
199.332 578.211 li
196.762 578.211 194.679 580.295 194.679 582.865 cv
194.679 601.906 li
194.679 604.475 196.762 606.559 199.332 606.559 cv
cp
f
86.8955 446.434 mo
86.8955 428.572 li
95.3994 428.572 li
95.3994 446.434 li
86.8955 446.434 li
cp
95.3994 473.08 mo
95.3994 463.354 li
95.3994 461.789 96.6685 460.52 98.2344 460.52 cv
118.057 460.52 li
119.623 460.52 120.892 459.25 120.892 457.686 cv
120.892 454.51 li
113.123 453.504 103.472 444.238 103.903 437.502 cv
103.472 430.766 113.123 421.502 120.892 420.494 cv
120.892 417.32 li
120.892 415.754 119.623 414.484 118.057 414.484 cv
98.2344 414.484 li
96.6685 414.484 95.3994 413.217 95.3994 411.65 cv
95.3994 401.926 li
95.3994 400.359 94.1304 399.09 92.5649 399.09 cv
86.8955 399.09 li
86.8955 420.068 li
78.3916 420.068 li
78.3916 454.938 li
86.8955 454.938 li
86.8955 475.914 li
92.5649 475.914 li
94.1304 475.914 95.3994 474.646 95.3994 473.08 cv
cp
f
136.408 445.656 mo
136.408 427.795 li
144.912 427.795 li
144.912 445.656 li
136.408 445.656 li
cp
144.912 472.303 mo
144.912 462.576 li
144.912 461.012 146.181 459.742 147.747 459.742 cv
167.569 459.742 li
169.135 459.742 170.404 458.473 170.404 456.908 cv
170.404 453.732 li
162.635 452.727 152.984 443.461 153.416 436.725 cv
152.984 429.988 162.635 420.725 170.404 419.717 cv
170.404 416.543 li
170.404 414.977 169.135 413.707 167.569 413.707 cv
147.747 413.707 li
146.181 413.707 144.912 412.439 144.912 410.873 cv
144.912 401.148 li
144.912 399.582 143.643 398.313 142.077 398.313 cv
136.408 398.313 li
136.408 419.291 li
127.904 419.291 li
128.066 436.725 li
127.904 454.16 li
136.408 454.16 li
136.408 475.137 li
142.077 475.137 li
143.643 475.137 144.912 473.869 144.912 472.303 cv
cp
f
191.654 452.883 mo
189.462 452.883 187.686 451.107 187.686 448.914 cv
187.686 446.723 189.462 444.947 191.654 444.947 cv
193.846 444.947 195.623 446.723 195.623 448.914 cv
195.623 451.107 193.846 452.883 191.654 452.883 cv
cp
200.584 402.932 mo
200.584 401.367 199.315 400.098 197.75 400.098 cv
185.558 400.098 li
183.993 400.098 182.724 401.367 182.724 402.932 cv
182.724 431.48 li
185.062 434.15 185.062 438.141 182.724 440.811 cv
182.724 470.518 li
182.724 472.084 183.993 473.354 185.558 473.354 cv
197.75 473.354 li
199.315 473.354 200.584 472.084 200.584 470.518 cv
200.584 440.811 li
198.247 438.141 198.247 434.15 200.584 431.48 cv
200.584 402.932 li
cp
f
31.3145 582.049 mo
31.3145 579.701 33.2178 577.797 35.5664 577.797 cv
37.9146 577.797 39.8184 579.701 39.8184 582.049 cv
39.8184 584.398 37.9146 586.301 35.5664 586.301 cv
33.2178 586.301 31.3145 584.398 31.3145 582.049 cv
cp
135.188 571.496 mo
135.188 540.889 li
135.443 540.576 135.729 540.289 136.042 540.033 cv
138.618 537.93 142.414 538.311 144.519 540.889 cv
144.519 571.496 li
144.138 572.041 143.664 572.514 143.12 572.895 cv
140.543 574.699 136.992 574.072 135.188 571.496 cv
cp
127.083 552.496 mo
129.275 552.496 131.052 554.273 131.052 556.465 cv
131.052 558.656 129.275 560.434 127.083 560.434 cv
124.892 560.434 123.115 558.656 123.115 556.465 cv
123.115 554.273 124.892 552.496 127.083 552.496 cv
cp
111.093 573.898 mo
111.093 539.031 li
119.597 539.031 li
119.597 573.898 li
111.093 573.898 li
cp
31.3145 530.881 mo
31.3145 528.531 33.2178 526.629 35.5664 526.629 cv
37.9146 526.629 39.8184 528.531 39.8184 530.881 cv
39.8184 533.229 37.9146 535.133 35.5664 535.133 cv
33.2178 535.133 31.3145 533.229 31.3145 530.881 cv
cp
168.613 539.031 mo
168.613 573.898 li
160.109 573.898 li
160.109 539.031 li
168.613 539.031 li
cp
187.35 600.889 mo
187.35 512.041 li
187.35 508.91 184.812 506.371 181.681 506.371 cv
25.3638 506.371 li
21.4419 510.57 19.2607 516.104 19.2607 521.85 cv
19.2607 591.08 li
19.2607 596.826 21.4419 602.359 25.3638 606.559 cv
181.681 606.559 li
184.812 606.559 187.35 604.02 187.35 600.889 cv
cp
f
29.6157 464.787 mo
29.6157 462.439 31.519 460.535 33.8677 460.535 cv
36.2158 460.535 38.1196 462.439 38.1196 464.787 cv
38.1196 467.135 36.2158 469.039 33.8677 469.039 cv
31.519 469.039 29.6157 467.135 29.6157 464.787 cv
cp
29.6157 413.617 mo
29.6157 411.27 31.519 409.365 33.8677 409.365 cv
36.2158 409.365 38.1196 411.27 38.1196 413.617 cv
38.1196 415.967 36.2158 417.869 33.8677 417.869 cv
31.519 417.869 29.6157 415.967 29.6157 413.617 cv
cp
214.112 496.496 mo
217.243 496.496 219.782 493.957 219.782 490.826 cv
219.782 481.314 li
219.692 481.314 li
218.262 478.271 li
216.501 478.271 li
215.072 481.314 li
213.405 481.314 li
211.929 478.271 li
210.167 478.271 li
208.737 481.314 li
207.071 481.314 li
205.596 478.271 li
203.833 478.271 li
202.403 481.314 li
200.736 481.314 li
199.262 478.271 li
197.499 478.271 li
196.069 481.314 li
194.402 481.314 li
192.974 478.271 li
191.211 478.271 li
189.735 481.314 li
188.068 481.314 li
186.64 478.271 li
184.877 478.271 li
183.401 481.314 li
181.735 481.314 li
180.305 478.271 li
178.542 478.271 li
177.067 481.314 li
175.4 481.314 li
173.97 478.271 li
172.209 478.271 li
170.781 481.314 li
169.114 481.314 li
167.638 478.271 li
165.875 478.271 li
164.447 481.314 li
162.731 481.314 li
161.303 478.271 li
159.542 478.271 li
158.112 481.314 li
156.397 481.314 li
154.969 478.271 li
153.208 478.271 li
151.778 481.314 li
150.064 481.314 li
148.681 478.271 li
146.873 478.271 li
145.443 481.314 li
143.776 481.314 li
142.348 478.271 li
140.539 478.271 li
139.11 481.314 li
137.443 481.314 li
136.013 478.271 li
134.205 478.271 li
132.776 481.314 li
131.109 481.314 li
129.679 478.271 li
127.873 478.271 li
126.49 481.314 li
124.774 481.314 li
123.345 478.271 li
121.583 478.271 li
120.156 481.314 li
118.44 481.314 li
117.012 478.271 li
115.25 478.271 li
113.82 481.314 li
112.106 481.314 li
110.678 478.271 li
108.917 478.271 li
107.486 481.314 li
105.773 481.314 li
104.39 478.271 li
102.582 478.271 li
101.152 481.314 li
99.4854 481.314 li
98.0571 478.271 li
96.2471 478.271 li
94.8188 481.314 li
93.1523 481.314 li
91.6748 478.172 li
89.9604 478.172 li
88.4849 481.314 li
86.8179 481.314 li
85.3408 478.172 li
83.627 478.172 li
82.1982 481.314 li
80.4829 481.314 li
79.0063 478.172 li
77.3398 478.172 li
75.8643 481.314 li
74.1489 481.314 li
72.6733 478.172 li
71.0063 478.172 li
70.0732 480.158 li
53.4077 473.385 42.5078 457.191 42.5078 439.203 cv
42.5078 414.787 62.2998 394.996 86.7148 394.996 cv
214.112 394.996 li
217.243 394.996 219.782 392.457 219.782 389.326 cv
219.782 387.578 li
219.782 384.447 217.243 381.91 214.112 381.91 cv
40.2393 381.91 li
27.7148 381.91 17.562 392.063 17.562 404.586 cv
17.562 473.818 li
17.562 486.342 27.7148 496.496 40.2393 496.496 cv
214.112 496.496 li
cp
f
61.1147 42.5503 mo
61.0552 42.604 li
60.7603 42.8696 60.4009 43.1177 60.0259 43.2573 cv
59.9683 43.2817 li
59.9595 43.311 li
59.9536 43.3345 li
59.9819 43.3882 li
60.2212 43.7554 60.3667 44.1753 60.4458 44.603 cv
60.4116 44.6616 li
60.3384 44.6909 li
59.9243 44.8188 59.5649 44.8794 59.1294 44.8706 cv
59.0669 44.8667 li
59.0464 44.8862 li
59.0327 44.9058 li
59.0366 44.9731 li
59.1079 45.3784 59.061 45.7925 58.9888 46.1919 cv
58.9634 46.2661 li
58.9097 46.3042 li
58.4829 46.2759 58.1128 46.1763 57.7192 46.0083 cv
57.6567 45.9741 li
57.603 45.9438 li
57.5737 45.9585 li
57.5503 45.9683 li
57.5347 46.0317 li
57.5161 46.0962 li
57.3853 46.5005 57.2007 46.8462 56.9409 47.1821 cv
56.8726 47.2026 li
56.8032 47.1587 li
56.4478 46.9604 56.1274 46.6987 55.8638 46.3882 cv
55.8188 46.3345 li
55.7954 46.3345 li
55.7896 46.3345 li
55.7651 46.3345 li
55.7212 46.3882 li
55.4712 46.6929 55.1294 46.9673 54.7856 47.1587 cv
54.7124 47.2026 li
54.644 47.1821 li
54.4097 46.8755 54.1802 46.4683 54.0737 46.0962 cv
54.0532 46.0317 li
54.0396 45.9683 li
54.0151 45.9585 li
53.9858 45.9438 li
53.9282 45.9741 li
53.8687 46.0083 li
53.4722 46.1763 53.1128 46.2729 52.6792 46.3042 cv
52.6206 46.2661 li
52.6021 46.1919 li
52.52 45.7925 52.4907 45.3794 52.5483 44.9731 cv
52.5571 44.9058 li
52.5425 44.8862 li
52.5229 44.8667 li
52.4556 44.8706 li
52.02 44.8813 51.5854 44.8101 51.1772 44.6616 cv
51.144 44.603 li
51.1587 44.5249 li
51.2397 44.1274 51.3833 43.729 51.6069 43.3882 cv
51.6353 43.3345 li
51.6313 43.311 li
51.6206 43.2817 li
51.5581 43.2573 li
51.1499 43.0972 50.7935 42.8491 50.4751 42.5503 cv
50.4702 42.4819 li
50.5142 42.4185 li
50.7495 42.0845 51.0435 41.7905 51.3813 41.5601 cv
51.4351 41.5269 li
51.4409 41.5015 li
51.4458 41.4731 li
51.353 41.3794 li
51.0708 41.0776 50.8521 40.7183 50.6948 40.3374 cv
50.7144 40.2681 li
50.7827 40.229 li
51.1421 40.022 51.5151 39.8735 51.9243 39.8003 cv
51.9868 39.7896 li
52.0015 39.7661 li
52.0171 39.7417 li
51.9917 39.6831 li
51.9722 39.6196 li
51.8345 39.2397 51.7847 38.8032 51.7915 38.4009 cv
51.8413 38.3521 li
51.9185 38.3423 li
52.3228 38.2964 52.7397 38.3091 53.1333 38.4155 cv
53.1958 38.4302 li
53.2202 38.4155 li
53.2397 38.396 li
53.2456 38.3325 li
53.271 37.8999 53.4038 37.4771 53.5815 37.0845 cv
53.6499 37.0552 li
53.7231 37.0747 li
54.1313 37.2104 54.4634 37.3726 54.8052 37.6362 cv
54.854 37.6802 li
54.8843 37.6743 li
54.9116 37.6646 li
54.9409 37.6108 li
55.1343 37.228 55.437 36.8813 55.7603 36.6011 cv
55.8286 36.6011 li
55.8872 36.6548 li
56.1821 36.9185 56.4692 37.2583 56.6479 37.6108 cv
56.6772 37.6646 li
56.7065 37.6743 li
56.731 37.6802 li
56.7798 37.6362 li
56.8325 37.5962 li
57.1646 37.3491 57.5444 37.1694 57.9399 37.0552 cv
58.0034 37.0845 li
58.0366 37.1528 li
58.2026 37.5259 58.313 37.9243 58.3452 38.3325 cv
58.3452 38.396 li
58.3628 38.4155 li
58.3882 38.4302 li
58.4575 38.4155 li
58.8726 38.3032 59.3169 38.2944 59.7446 38.3521 cv
59.7925 38.4009 li
59.7925 38.479 li
59.8052 38.8882 59.731 39.2964 59.5981 39.6831 cv
59.5737 39.7417 li
59.5835 39.7661 li
59.603 39.7896 li
59.6655 39.8003 li
60.0767 39.8755 60.4429 40.0181 60.8022 40.229 cv
60.8696 40.2681 li
60.895 40.3374 li
60.7251 40.7358 60.5278 41.0562 60.2358 41.3794 cv
60.144 41.4731 li
60.1479 41.5015 li
60.1528 41.5269 li
60.2065 41.5601 li
60.563 41.8042 60.8804 42.1235 61.1187 42.4819 cv
61.1147 42.5503 li
cp
94.4214 44.4043 mo
94.4424 44.0059 li
95.5498 43.6943 96.6079 43.2383 97.6328 42.6729 cv
97.6328 41.0537 li
96.6191 40.4902 95.5522 40.0547 94.4424 39.7197 cv
94.395 38.8145 li
94.3628 38.5293 94.3311 38.2441 94.2993 37.958 cv
95.3638 37.4326 96.3447 36.834 97.2524 36.1006 cv
97.0142 34.5283 li
95.9341 34.1289 94.77 33.8398 93.6323 33.6719 cv
93.4424 32.8613 li
93.3628 32.5605 93.2837 32.2588 93.2041 31.958 cv
94.1641 31.3252 95.0239 30.5576 95.8237 29.7188 cv
95.3477 28.1475 li
94.2075 27.9482 93.04 27.833 91.8706 27.8613 cv
91.5376 27.0518 li
91.4263 26.7822 91.3145 26.5127 91.2036 26.2422 cv
92.042 25.4443 92.7954 24.5508 93.4424 23.5752 cv
92.728 22.1465 li
91.5513 22.0996 90.3882 22.1787 89.251 22.4326 cv
88.7749 21.6221 li
88.6162 21.3848 88.457 21.1465 88.2988 20.9082 cv
89.0039 19.9834 89.6187 18.9727 90.1089 17.9082 cv
89.1563 16.6221 li
88.0146 16.7451 86.8662 17.0391 85.7739 17.3838 cv
85.2031 16.7646 li
85.0127 16.543 84.8223 16.3203 84.6318 16.0977 cv
85.1782 15.0615 85.6235 13.9834 85.9648 12.8594 cv
84.8218 11.6689 li
83.7051 12.0264 82.6465 12.4697 81.5835 13.0029 cv
80.9165 12.4316 li
80.25 11.8594 li
80.6323 10.7617 80.8916 9.625 81.0601 8.47852 cv
79.7261 7.52539 li
78.6631 8.03418 77.6797 8.64648 76.7256 9.33594 cv
76.0107 8.85938 li
75.249 8.43066 li
75.4565 7.28516 75.5239 6.12891 75.4873 4.9541 cv
74.0586 4.19141 li
73.1128 4.85254 72.1851 5.62305 71.3916 6.47852 cv
70.5825 6.09668 li
69.7725 5.76367 li
69.7993 4.58789 69.7134 3.42969 69.4868 2.28711 cv
67.9629 1.81055 li
67.0967 2.58789 66.3506 3.48535 65.6768 4.42969 cv
64.8198 4.23926 li
63.9624 4.04883 li
63.7827 2.89551 63.5 1.75195 63.1055 .666992 cv
61.5337 .381836 li
60.8442 1.30566 60.1899 2.32324 59.6763 3.38281 cv
58.8193 3.28711 li
57.9619 3.23926 li
57.6162 2.11328 57.1504 1.03809 56.5806 0 cv
54.9609 0 li
54.415 1.03613 53.9609 2.11523 53.6279 3.23926 cv
52.7231 3.28711 li
51.8652 3.38281 li
51.395 2.32422 50.7559 1.31152 50.0562 .381836 cv
48.437 .666992 li
48.0361 1.7627 47.7568 2.9082 47.5791 4.04883 cv
46.77 4.23926 li
45.9121 4.42969 li
45.21 3.50977 44.4668 2.61328 43.627 1.81055 cv
42.1025 2.28711 li
41.8486 3.42578 41.7593 4.60449 41.8169 5.76367 cv
40.96 6.09668 li
40.1499 6.47852 li
39.3638 5.59473 38.4541 4.84277 37.4829 4.19141 cv
36.0542 4.9541 li
36.0254 6.13184 36.1104 7.29199 36.3398 8.43066 cv
35.5308 8.85938 li
34.8164 9.33594 li
33.8823 8.64941 32.8872 8.02832 31.8154 7.52539 cv
30.5298 8.47852 li
30.6509 9.63184 30.9336 10.7695 31.3394 11.8594 cv
30.6724 12.4316 li
30.0063 13.0029 li
28.96 12.4951 27.8735 12.0146 26.7676 11.6689 cv
25.6245 12.8594 li
25.9434 13.9941 26.3872 15.0723 26.958 16.0977 cv
26.6113 16.4717 li
26.3389 16.7646 li
25.7676 17.3838 li
24.6855 17.0303 23.5288 16.7314 22.3862 16.6221 cv
21.4341 17.9082 li
21.9429 18.957 22.5547 19.9619 23.2432 20.9082 cv
23.0996 21.1465 22.9575 21.3848 22.8145 21.6221 cv
22.3379 22.4326 li
21.1992 22.1807 20.0415 22.1016 18.8618 22.1465 cv
18.1001 23.5752 li
18.7612 24.5322 19.5288 25.4541 20.3857 26.2422 cv
20.2588 26.5127 20.1313 26.7822 20.0049 27.0518 cv
19.6714 27.8613 li
18.499 27.8359 17.3374 27.9512 16.1953 28.1475 cv
15.7188 29.7188 li
16.5273 30.543 17.4033 31.334 18.3857 31.958 cv
18.3066 32.2588 18.2266 32.5605 18.1475 32.8613 cv
17.957 33.6719 li
16.8164 33.8379 15.666 34.1182 14.5757 34.5283 cv
14.2891 36.1006 li
15.1987 36.835 16.2314 37.4619 17.29 37.958 cv
17.2368 38.4375 li
17.1948 38.8145 li
17.1475 39.7197 li
16.0269 40.0449 14.9692 40.4834 13.9561 41.0537 cv
13.9561 42.6729 li
14.9839 43.2461 16.0322 43.7061 17.1475 44.0059 cv
17.1743 44.5127 li
17.1948 44.9111 li
17.29 45.7686 li
16.2266 46.2969 15.249 46.9189 14.2891 47.625 cv
14.5757 49.1973 li
15.6611 49.6133 16.8145 49.8721 17.957 50.0547 cv
18.02 50.3408 18.0845 50.626 18.1475 50.9121 cv
18.3857 51.7695 li
17.3896 52.4141 16.5068 53.1787 15.7188 54.0547 cv
16.1953 55.5791 li
17.3428 55.7871 18.4937 55.8721 19.6714 55.8652 cv
19.7827 56.1348 19.8936 56.4043 20.0049 56.6738 cv
20.3857 57.4844 li
19.5317 58.2979 18.7793 59.2041 18.1001 60.1514 cv
18.8618 61.5801 li
20.0396 61.6035 21.1958 61.5391 22.3379 61.3418 cv
22.4971 61.5957 22.6553 61.8496 22.8145 62.1035 cv
23.2432 62.8184 li
22.5596 63.7715 21.9473 64.7744 21.4336 65.8184 cv
21.4341 65.8184 22.3862 67.1514 22.3862 67.1514 cv
23.5269 66.9746 24.6616 66.7139 25.7676 66.3428 cv
25.958 66.5645 26.1479 66.7871 26.3389 67.0098 cv
26.958 67.6758 li
26.3687 68.6924 25.9302 69.7705 25.6245 70.9141 cv
26.7676 72.0576 li
27.8604 71.7119 28.9634 71.249 30.0063 70.7236 cv
30.6724 71.2959 li
31.3394 71.8672 li
30.9375 72.9658 30.6558 74.0947 30.5298 75.248 cv
31.8154 76.2002 li
32.8945 75.7139 33.8882 75.0957 34.8164 74.3916 cv
35.5308 74.8672 li
36.3398 75.3438 li
36.1045 76.4844 36.0254 77.6445 36.0542 78.8203 cv
37.4829 79.5342 li
38.4541 78.8682 39.3286 78.1348 40.1499 77.2959 cv
40.96 77.6289 li
41.8169 77.9629 li
41.7593 79.1182 41.8486 80.3037 42.1025 81.4395 cv
43.627 81.915 li
44.4575 81.1113 45.2427 80.1934 45.9121 79.2959 cv
46.77 79.4863 li
47.5791 79.7246 li
47.7588 80.8506 48.0352 81.9834 48.437 83.0586 cv
50.0562 83.3438 li
50.7539 82.4395 51.3657 81.4287 51.8652 80.3916 cv
52.7231 80.4395 li
53.6279 80.4863 li
53.9658 81.6152 54.4097 82.6982 54.9609 83.7256 cv
56.5806 83.7256 li
57.1563 82.6934 57.6138 81.6094 57.9619 80.4863 cv
58.8193 80.4395 li
59.6763 80.3916 li
60.2134 81.4258 60.8242 82.4131 61.5337 83.3438 cv
63.1055 83.0586 li
63.5029 81.9873 63.7813 80.8594 63.9624 79.7246 cv
64.8198 79.4863 li
65.6768 79.2959 li
66.3423 80.248 67.0894 81.1445 67.9629 81.915 cv
69.4868 81.4395 li
69.7148 80.2939 69.8008 79.1396 69.7725 77.9629 cv
70.5825 77.6289 li
71.3916 77.2959 li
72.2065 78.0957 73.103 78.875 74.0586 79.5342 cv
75.4873 78.8203 li
75.522 77.6436 75.46 76.4805 75.249 75.3438 cv
76.0107 74.8672 li
76.7251 74.3916 li
77.6606 75.0889 78.6538 75.7109 79.7261 76.2002 cv
81.0601 75.248 li
80.8867 74.0977 80.625 72.9629 80.25 71.8672 cv
80.9165 71.2959 li
81.5835 70.7236 li
82.623 71.2656 83.707 71.7217 84.8218 72.0576 cv
85.9648 70.9141 li
85.6533 69.7871 85.1948 68.7002 84.6318 67.6768 cv
85.2031 67.0098 li
85.3931 66.7871 85.584 66.5645 85.7739 66.3428 cv
86.8809 66.7012 88.0205 66.9609 89.1563 67.1514 cv
90.1089 65.8184 li
89.6138 64.7598 89.0034 63.7549 88.2988 62.8184 cv
88.7749 62.1035 li
88.9336 61.8496 89.0923 61.5957 89.251 61.3418 cv
90.3921 61.541 91.5532 61.6055 92.728 61.5801 cv
93.4424 60.1514 li
92.7998 59.1836 92.0229 58.292 91.2036 57.4844 cv
91.5376 56.6738 li
91.6484 56.4043 91.7593 56.1348 91.8706 55.8652 cv
93.0459 55.876 94.1987 55.79 95.3477 55.5791 cv
95.8237 54.0547 li
95.0532 53.1689 94.1821 52.4258 93.2041 51.7695 cv
93.4424 50.9121 li
93.5488 50.4316 li
93.6323 50.0547 li
94.7661 49.8721 95.9233 49.6074 97.0142 49.1973 cv
97.2524 47.625 li
96.3145 46.9063 95.353 46.3193 94.2993 45.7686 cv
94.395 44.9111 li
94.4214 44.4043 li
cp
f
148.458 42.5503 mo
148.398 42.604 li
148.104 42.8696 147.744 43.1177 147.369 43.2573 cv
147.312 43.2817 li
147.303 43.311 li
147.297 43.3345 li
147.325 43.3882 li
147.564 43.7554 147.71 44.1753 147.789 44.603 cv
147.755 44.6616 li
147.682 44.6909 li
147.268 44.8188 146.908 44.8794 146.473 44.8706 cv
146.41 44.8667 li
146.39 44.8862 li
146.376 44.9058 li
146.38 44.9731 li
146.451 45.3784 146.404 45.7925 146.332 46.1919 cv
146.307 46.2661 li
146.253 46.3042 li
145.826 46.2759 145.456 46.1763 145.063 46.0083 cv
145 45.9741 li
144.946 45.9438 li
144.917 45.9585 li
144.894 45.9683 li
144.878 46.0317 li
144.859 46.0962 li
144.729 46.5005 144.544 46.8462 144.284 47.1821 cv
144.216 47.2026 li
144.146 47.1587 li
143.791 46.9604 143.471 46.6987 143.207 46.3882 cv
143.162 46.3345 li
143.139 46.3345 li
143.133 46.3345 li
143.108 46.3345 li
143.064 46.3882 li
142.814 46.6929 142.473 46.9673 142.129 47.1587 cv
142.056 47.2026 li
141.987 47.1821 li
141.753 46.8755 141.523 46.4683 141.417 46.0962 cv
141.396 46.0317 li
141.383 45.9683 li
141.358 45.9585 li
141.329 45.9438 li
141.271 45.9741 li
141.212 46.0083 li
140.815 46.1763 140.456 46.2729 140.022 46.3042 cv
139.964 46.2661 li
139.945 46.1919 li
139.863 45.7925 139.834 45.3794 139.892 44.9731 cv
139.9 44.9058 li
139.886 44.8862 li
139.866 44.8667 li
139.799 44.8706 li
139.363 44.8813 138.929 44.8101 138.521 44.6616 cv
138.487 44.603 li
138.502 44.5249 li
138.583 44.1274 138.727 43.729 138.95 43.3882 cv
138.979 43.3345 li
138.975 43.311 li
138.964 43.2817 li
138.901 43.2573 li
138.493 43.0972 138.137 42.8491 137.818 42.5503 cv
137.813 42.4819 li
137.857 42.4185 li
138.093 42.0845 138.387 41.7905 138.725 41.5601 cv
138.778 41.5269 li
138.784 41.5015 li
138.789 41.4731 li
138.696 41.3794 li
138.414 41.0776 138.195 40.7183 138.038 40.3374 cv
138.058 40.2681 li
138.126 40.229 li
138.485 40.022 138.858 39.8735 139.268 39.8003 cv
139.33 39.7896 li
139.345 39.7661 li
139.36 39.7417 li
139.335 39.6831 li
139.315 39.6196 li
139.178 39.2397 139.128 38.8032 139.135 38.4009 cv
139.185 38.3521 li
139.262 38.3423 li
139.666 38.2964 140.083 38.3091 140.477 38.4155 cv
140.539 38.4302 li
140.563 38.4155 li
140.583 38.396 li
140.589 38.3325 li
140.614 37.8999 140.747 37.4771 140.925 37.0845 cv
140.993 37.0552 li
141.066 37.0747 li
141.475 37.2104 141.807 37.3726 142.148 37.6362 cv
142.197 37.6802 li
142.228 37.6743 li
142.255 37.6646 li
142.284 37.6108 li
142.478 37.228 142.78 36.8813 143.104 36.6011 cv
143.172 36.6011 li
143.23 36.6548 li
143.525 36.9185 143.813 37.2583 143.991 37.6108 cv
144.021 37.6646 li
144.05 37.6743 li
144.074 37.6802 li
144.123 37.6362 li
144.176 37.5962 li
144.508 37.3491 144.888 37.1694 145.283 37.0552 cv
145.347 37.0845 li
145.38 37.1528 li
145.546 37.5259 145.656 37.9243 145.688 38.3325 cv
145.688 38.396 li
145.706 38.4155 li
145.731 38.4302 li
145.801 38.4155 li
146.216 38.3032 146.66 38.2944 147.088 38.3521 cv
147.136 38.4009 li
147.136 38.479 li
147.148 38.8882 147.074 39.2964 146.941 39.6831 cv
146.917 39.7417 li
146.927 39.7661 li
146.946 39.7896 li
147.009 39.8003 li
147.42 39.8755 147.786 40.0181 148.146 40.229 cv
148.213 40.2681 li
148.238 40.3374 li
148.068 40.7358 147.871 41.0562 147.579 41.3794 cv
147.487 41.4731 li
147.491 41.5015 li
147.496 41.5269 li
147.55 41.5601 li
147.906 41.8042 148.224 42.1235 148.462 42.4819 cv
148.458 42.5503 li
cp
181.765 44.4043 mo
181.786 44.0059 li
182.894 43.6943 183.951 43.2383 184.977 42.6729 cv
184.977 41.0537 li
183.963 40.4902 182.896 40.0547 181.786 39.7197 cv
181.738 38.8145 li
181.706 38.5293 181.675 38.2441 181.643 37.958 cv
182.707 37.4326 183.688 36.834 184.596 36.1006 cv
184.357 34.5283 li
183.277 34.1289 182.113 33.8398 180.976 33.6719 cv
180.786 32.8613 li
180.706 32.5605 180.627 32.2588 180.548 31.958 cv
181.508 31.3252 182.367 30.5576 183.167 29.7188 cv
182.691 28.1475 li
181.551 27.9482 180.384 27.833 179.214 27.8613 cv
178.881 27.0518 li
178.77 26.7822 178.658 26.5127 178.547 26.2422 cv
179.386 25.4443 180.139 24.5508 180.786 23.5752 cv
180.071 22.1465 li
178.895 22.0996 177.731 22.1787 176.595 22.4326 cv
176.118 21.6221 li
175.96 21.3848 175.801 21.1465 175.643 20.9082 cv
176.348 19.9834 176.962 18.9727 177.452 17.9082 cv
176.5 16.6221 li
175.358 16.7451 174.21 17.0391 173.117 17.3838 cv
172.547 16.7646 li
172.356 16.543 172.166 16.3203 171.976 16.0977 cv
172.521 15.0615 172.967 13.9834 173.309 12.8594 cv
172.165 11.6689 li
171.049 12.0264 169.99 12.4697 168.927 13.0029 cv
168.26 12.4316 li
167.594 11.8594 li
167.976 10.7617 168.235 9.625 168.403 8.47852 cv
167.069 7.52539 li
166.007 8.03418 165.023 8.64648 164.069 9.33594 cv
163.354 8.85938 li
162.593 8.43066 li
162.8 7.28516 162.867 6.12891 162.831 4.9541 cv
161.402 4.19141 li
160.456 4.85254 159.528 5.62305 158.735 6.47852 cv
157.926 6.09668 li
157.116 5.76367 li
157.143 4.58789 157.057 3.42969 156.83 2.28711 cv
155.307 1.81055 li
154.44 2.58789 153.694 3.48535 153.021 4.42969 cv
152.163 4.23926 li
151.306 4.04883 li
151.126 2.89551 150.844 1.75195 150.449 .666992 cv
148.877 .381836 li
148.188 1.30566 147.533 2.32324 147.02 3.38281 cv
146.163 3.28711 li
145.306 3.23926 li
144.96 2.11328 144.494 1.03809 143.924 0 cv
142.305 0 li
141.759 1.03613 141.305 2.11523 140.972 3.23926 cv
140.066 3.28711 li
139.209 3.38281 li
138.738 2.32422 138.1 1.31152 137.399 .381836 cv
135.78 .666992 li
135.38 1.7627 135.101 2.9082 134.923 4.04883 cv
134.113 4.23926 li
133.256 4.42969 li
132.554 3.50977 131.811 2.61328 130.971 1.81055 cv
129.446 2.28711 li
129.192 3.42578 129.103 4.60449 129.16 5.76367 cv
128.304 6.09668 li
127.493 6.47852 li
126.707 5.59473 125.798 4.84277 124.826 4.19141 cv
123.397 4.9541 li
123.369 6.13184 123.454 7.29199 123.684 8.43066 cv
122.874 8.85938 li
122.16 9.33594 li
121.226 8.64941 120.23 8.02832 119.159 7.52539 cv
117.873 8.47852 li
117.994 9.63184 118.277 10.7695 118.683 11.8594 cv
118.016 12.4316 li
117.35 13.0029 li
116.304 12.4951 115.217 12.0146 114.111 11.6689 cv
112.968 12.8594 li
113.287 13.9941 113.73 15.0723 114.302 16.0977 cv
113.955 16.4717 li
113.683 16.7646 li
113.111 17.3838 li
112.029 17.0303 110.872 16.7314 109.729 16.6221 cv
108.777 17.9082 li
109.286 18.957 109.898 19.9619 110.587 20.9082 cv
110.443 21.1465 110.301 21.3848 110.158 21.6221 cv
109.682 22.4326 li
108.543 22.1807 107.385 22.1016 106.205 22.1465 cv
105.443 23.5752 li
106.104 24.5322 106.872 25.4541 107.729 26.2422 cv
107.603 26.5127 107.475 26.7822 107.349 27.0518 cv
107.015 27.8613 li
105.843 27.8359 104.681 27.9512 103.539 28.1475 cv
103.063 29.7188 li
103.871 30.543 104.747 31.334 105.729 31.958 cv
105.65 32.2588 105.57 32.5605 105.491 32.8613 cv
105.301 33.6719 li
104.16 33.8379 103.01 34.1182 101.919 34.5283 cv
101.633 36.1006 li
102.542 36.835 103.575 37.4619 104.634 37.958 cv
104.58 38.4375 li
104.538 38.8145 li
104.491 39.7197 li
103.37 40.0449 102.313 40.4834 101.3 41.0537 cv
101.3 42.6729 li
102.327 43.2461 103.376 43.7061 104.491 44.0059 cv
104.518 44.5127 li
104.538 44.9111 li
104.634 45.7686 li
103.57 46.2969 102.593 46.9189 101.633 47.625 cv
101.919 49.1973 li
103.005 49.6133 104.158 49.8721 105.301 50.0547 cv
105.363 50.3408 105.428 50.626 105.491 50.9121 cv
105.729 51.7695 li
104.733 52.4141 103.851 53.1787 103.063 54.0547 cv
103.539 55.5791 li
104.687 55.7871 105.837 55.8721 107.015 55.8652 cv
107.126 56.1348 107.237 56.4043 107.349 56.6738 cv
107.729 57.4844 li
106.875 58.2979 106.123 59.2041 105.443 60.1514 cv
106.205 61.5801 li
107.383 61.6035 108.539 61.5391 109.682 61.3418 cv
109.841 61.5957 109.999 61.8496 110.158 62.1035 cv
110.587 62.8184 li
109.903 63.7715 109.291 64.7744 108.777 65.8184 cv
109.729 67.1514 li
110.87 66.9746 112.005 66.7139 113.111 66.3428 cv
113.302 66.5645 113.491 66.7871 113.683 67.0098 cv
114.302 67.6758 li
113.712 68.6924 113.273 69.7705 112.968 70.9141 cv
114.111 72.0576 li
115.204 71.7119 116.307 71.249 117.35 70.7236 cv
118.016 71.2959 li
118.683 71.8672 li
118.281 72.9658 117.999 74.0947 117.873 75.248 cv
119.159 76.2002 li
120.238 75.7139 121.231 75.0957 122.16 74.3916 cv
122.874 74.8672 li
123.684 75.3438 li
123.448 76.4844 123.369 77.6445 123.397 78.8203 cv
124.826 79.5342 li
125.798 78.8682 126.672 78.1348 127.493 77.2959 cv
128.304 77.6289 li
129.16 77.9629 li
129.103 79.1182 129.192 80.3037 129.446 81.4395 cv
130.971 81.915 li
131.801 81.1113 132.586 80.1934 133.256 79.2959 cv
134.113 79.4863 li
134.923 79.7246 li
135.103 80.8506 135.379 81.9834 135.78 83.0586 cv
137.399 83.3438 li
138.098 82.4395 138.709 81.4287 139.209 80.3916 cv
140.066 80.4395 li
140.972 80.4863 li
141.31 81.6152 141.753 82.6982 142.305 83.7256 cv
143.924 83.7256 li
144.5 82.6934 144.957 81.6094 145.306 80.4863 cv
146.163 80.4395 li
147.02 80.3916 li
147.557 81.4258 148.168 82.4131 148.877 83.3438 cv
150.449 83.0586 li
150.847 81.9873 151.125 80.8594 151.306 79.7246 cv
152.163 79.4863 li
153.021 79.2959 li
153.686 80.248 154.433 81.1445 155.307 81.915 cv
156.83 81.4395 li
157.059 80.2939 157.145 79.1396 157.116 77.9629 cv
157.926 77.6289 li
158.735 77.2959 li
159.55 78.0957 160.446 78.875 161.402 79.5342 cv
162.831 78.8203 li
162.865 77.6436 162.804 76.4805 162.593 75.3438 cv
163.354 74.8672 li
164.068 74.3916 li
165.004 75.0889 165.997 75.7109 167.069 76.2002 cv
168.403 75.248 li
168.23 74.0977 167.969 72.9629 167.594 71.8672 cv
168.26 71.2959 li
168.927 70.7236 li
169.967 71.2656 171.051 71.7217 172.165 72.0576 cv
173.309 70.9141 li
172.997 69.7871 172.538 68.7002 171.976 67.6768 cv
172.547 67.0098 li
172.736 66.7871 172.928 66.5645 173.117 66.3428 cv
174.225 66.7012 175.364 66.9609 176.5 67.1514 cv
177.452 65.8184 li
176.957 64.7598 176.347 63.7549 175.643 62.8184 cv
176.118 62.1035 li
176.277 61.8496 176.436 61.5957 176.595 61.3418 cv
177.735 61.541 178.896 61.6055 180.071 61.5801 cv
180.786 60.1514 li
180.144 59.1836 179.366 58.292 178.547 57.4844 cv
178.881 56.6738 li
178.992 56.4043 179.103 56.1348 179.214 55.8652 cv
180.39 55.876 181.542 55.79 182.691 55.5791 cv
183.167 54.0547 li
182.396 53.1689 181.525 52.4258 180.548 51.7695 cv
180.786 50.9121 li
180.893 50.4316 li
180.976 50.0547 li
182.109 49.8721 183.267 49.6074 184.357 49.1973 cv
184.596 47.625 li
183.658 46.9063 182.696 46.3193 181.643 45.7686 cv
181.738 44.9111 li
181.765 44.4043 li
cp
f
235.802 42.5503 mo
235.742 42.604 li
235.447 42.8696 235.088 43.1177 234.713 43.2573 cv
234.655 43.2817 li
234.646 43.311 li
234.641 43.3345 li
234.669 43.3882 li
234.908 43.7554 235.054 44.1753 235.133 44.603 cv
235.099 44.6616 li
235.025 44.6909 li
234.611 44.8188 234.252 44.8794 233.816 44.8706 cv
233.754 44.8667 li
233.733 44.8862 li
233.72 44.9058 li
233.724 44.9731 li
233.795 45.3784 233.748 45.7925 233.676 46.1919 cv
233.65 46.2661 li
233.597 46.3042 li
233.17 46.2759 232.8 46.1763 232.406 46.0083 cv
232.344 45.9741 li
232.29 45.9438 li
232.261 45.9585 li
232.237 45.9683 li
232.222 46.0317 li
232.203 46.0962 li
232.072 46.5005 231.888 46.8462 231.628 47.1821 cv
231.56 47.2026 li
231.49 47.1587 li
231.135 46.9604 230.814 46.6987 230.551 46.3882 cv
230.506 46.3345 li
230.482 46.3345 li
230.477 46.3345 li
230.452 46.3345 li
230.408 46.3882 li
230.158 46.6929 229.816 46.9673 229.473 47.1587 cv
229.399 47.2026 li
229.331 47.1821 li
229.097 46.8755 228.867 46.4683 228.761 46.0962 cv
228.74 46.0317 li
228.727 45.9683 li
228.702 45.9585 li
228.673 45.9438 li
228.615 45.9741 li
228.556 46.0083 li
228.159 46.1763 227.8 46.2729 227.366 46.3042 cv
227.308 46.2661 li
227.289 46.1919 li
227.207 45.7925 227.178 45.3794 227.235 44.9731 cv
227.244 44.9058 li
227.229 44.8862 li
227.21 44.8667 li
227.143 44.8706 li
226.707 44.8813 226.272 44.8101 225.864 44.6616 cv
225.831 44.603 li
225.846 44.5249 li
225.927 44.1274 226.07 43.729 226.294 43.3882 cv
226.322 43.3345 li
226.318 43.311 li
226.308 43.2817 li
226.245 43.2573 li
225.837 43.0972 225.48 42.8491 225.162 42.5503 cv
225.157 42.4819 li
225.201 42.4185 li
225.437 42.0845 225.73 41.7905 226.068 41.5601 cv
226.122 41.5269 li
226.128 41.5015 li
226.133 41.4731 li
226.04 41.3794 li
225.758 41.0776 225.539 40.7183 225.382 40.3374 cv
225.401 40.2681 li
225.47 40.229 li
225.829 40.022 226.202 39.8735 226.611 39.8003 cv
226.674 39.7896 li
226.688 39.7661 li
226.704 39.7417 li
226.679 39.6831 li
226.659 39.6196 li
226.521 39.2397 226.472 38.8032 226.479 38.4009 cv
226.528 38.3521 li
226.605 38.3423 li
227.01 38.2964 227.427 38.3091 227.82 38.4155 cv
227.883 38.4302 li
227.907 38.4155 li
227.927 38.396 li
227.933 38.3325 li
227.958 37.8999 228.091 37.4771 228.269 37.0845 cv
228.337 37.0552 li
228.41 37.0747 li
228.818 37.2104 229.15 37.3726 229.492 37.6362 cv
229.541 37.6802 li
229.571 37.6743 li
229.599 37.6646 li
229.628 37.6108 li
229.821 37.228 230.124 36.8813 230.447 36.6011 cv
230.516 36.6011 li
230.574 36.6548 li
230.869 36.9185 231.156 37.2583 231.335 37.6108 cv
231.364 37.6646 li
231.394 37.6743 li
231.418 37.6802 li
231.467 37.6362 li
231.52 37.5962 li
231.852 37.3491 232.231 37.1694 232.627 37.0552 cv
232.69 37.0845 li
232.724 37.1528 li
232.89 37.5259 233 37.9243 233.032 38.3325 cv
233.032 38.396 li
233.05 38.4155 li
233.075 38.4302 li
233.145 38.4155 li
233.56 38.3032 234.004 38.2944 234.432 38.3521 cv
234.479 38.4009 li
234.479 38.479 li
234.492 38.8882 234.418 39.2964 234.285 39.6831 cv
234.261 39.7417 li
234.271 39.7661 li
234.29 39.7896 li
234.353 39.8003 li
234.764 39.8755 235.13 40.0181 235.489 40.229 cv
235.557 40.2681 li
235.582 40.3374 li
235.412 40.7358 235.215 41.0562 234.923 41.3794 cv
234.831 41.4731 li
234.835 41.5015 li
234.84 41.5269 li
234.894 41.5601 li
235.25 41.8042 235.567 42.1235 235.806 42.4819 cv
235.802 42.5503 li
cp
269.108 44.4043 mo
269.129 44.0059 li
270.237 43.6943 271.295 43.2383 272.32 42.6729 cv
272.32 41.0537 li
271.306 40.4902 270.239 40.0547 269.129 39.7197 cv
269.082 38.8145 li
269.05 38.5293 269.018 38.2441 268.986 37.958 cv
270.051 37.4326 271.032 36.834 271.939 36.1006 cv
271.701 34.5283 li
270.621 34.1289 269.457 33.8398 268.319 33.6719 cv
268.129 32.8613 li
268.05 32.5605 267.971 32.2588 267.891 31.958 cv
268.851 31.3252 269.711 30.5576 270.511 29.7188 cv
270.035 28.1475 li
268.895 27.9482 267.727 27.833 266.558 27.8613 cv
266.225 27.0518 li
266.113 26.7822 266.001 26.5127 265.891 26.2422 cv
266.729 25.4443 267.482 24.5508 268.129 23.5752 cv
267.415 22.1465 li
266.238 22.0996 265.075 22.1787 263.938 22.4326 cv
263.462 21.6221 li
263.303 21.3848 263.144 21.1465 262.986 20.9082 cv
263.691 19.9834 264.306 18.9727 264.796 17.9082 cv
263.843 16.6221 li
262.702 16.7451 261.553 17.0391 260.461 17.3838 cv
259.89 16.7646 li
259.7 16.543 259.509 16.3203 259.319 16.0977 cv
259.865 15.0615 260.311 13.9834 260.652 12.8594 cv
259.509 11.6689 li
258.392 12.0264 257.333 12.4697 256.271 13.0029 cv
255.604 12.4316 li
254.937 11.8594 li
255.319 10.7617 255.579 9.625 255.747 8.47852 cv
254.413 7.52539 li
253.35 8.03418 252.367 8.64648 251.413 9.33594 cv
250.698 8.85938 li
249.936 8.43066 li
250.144 7.28516 250.211 6.12891 250.174 4.9541 cv
248.746 4.19141 li
247.8 4.85254 246.872 5.62305 246.079 6.47852 cv
245.27 6.09668 li
244.459 5.76367 li
244.486 4.58789 244.4 3.42969 244.174 2.28711 cv
242.65 1.81055 li
241.784 2.58789 241.038 3.48535 240.364 4.42969 cv
239.507 4.23926 li
238.649 4.04883 li
238.47 2.89551 238.187 1.75195 237.792 .666992 cv
236.221 .381836 li
235.531 1.30566 234.877 2.32324 234.363 3.38281 cv
233.506 3.28711 li
232.649 3.23926 li
232.303 2.11328 231.837 1.03809 231.268 0 cv
229.648 0 li
229.102 1.03613 228.648 2.11523 228.315 3.23926 cv
227.41 3.28711 li
226.552 3.38281 li
226.082 2.32422 225.443 1.31152 224.743 .381836 cv
223.124 .666992 li
222.723 1.7627 222.444 2.9082 222.266 4.04883 cv
221.457 4.23926 li
220.599 4.42969 li
219.897 3.50977 219.154 2.61328 218.314 1.81055 cv
216.79 2.28711 li
216.536 3.42578 216.446 4.60449 216.504 5.76367 cv
215.647 6.09668 li
214.837 6.47852 li
214.051 5.59473 213.141 4.84277 212.17 4.19141 cv
210.741 4.9541 li
210.712 6.13184 210.797 7.29199 211.027 8.43066 cv
210.218 8.85938 li
209.503 9.33594 li
208.569 8.64941 207.574 8.02832 206.502 7.52539 cv
205.217 8.47852 li
205.338 9.63184 205.621 10.7695 206.026 11.8594 cv
205.359 12.4316 li
204.693 13.0029 li
203.647 12.4951 202.561 12.0146 201.455 11.6689 cv
200.312 12.8594 li
200.63 13.9941 201.074 15.0723 201.645 16.0977 cv
201.298 16.4717 li
201.026 16.7646 li
200.455 17.3838 li
199.373 17.0303 198.216 16.7314 197.073 16.6221 cv
196.121 17.9082 li
196.63 18.957 197.242 19.9619 197.93 20.9082 cv
197.787 21.1465 197.645 21.3848 197.501 21.6221 cv
197.025 22.4326 li
195.886 22.1807 194.729 22.1016 193.549 22.1465 cv
192.787 23.5752 li
193.448 24.5322 194.216 25.4541 195.073 26.2422 cv
194.946 26.5127 194.818 26.7822 194.692 27.0518 cv
194.358 27.8613 li
193.186 27.8359 192.024 27.9512 190.882 28.1475 cv
190.406 29.7188 li
191.214 30.543 192.09 31.334 193.073 31.958 cv
192.994 32.2588 192.914 32.5605 192.834 32.8613 cv
192.644 33.6719 li
191.503 33.8379 190.353 34.1182 189.263 34.5283 cv
188.976 36.1006 li
189.886 36.835 190.918 37.4619 191.977 37.958 cv
191.924 38.4375 li
191.882 38.8145 li
191.834 39.7197 li
190.714 40.0449 189.656 40.4834 188.643 41.0537 cv
188.643 42.6729 li
189.671 43.2461 190.719 43.7061 191.834 44.0059 cv
191.861 44.5127 li
191.882 44.9111 li
191.977 45.7686 li
190.914 46.2969 189.936 46.9189 188.976 47.625 cv
189.263 49.1973 li
190.348 49.6133 191.501 49.8721 192.644 50.0547 cv
192.707 50.3408 192.771 50.626 192.834 50.9121 cv
193.073 51.7695 li
192.077 52.4141 191.194 53.1787 190.406 54.0547 cv
190.882 55.5791 li
192.03 55.7871 193.181 55.8721 194.358 55.8652 cv
194.47 56.1348 194.581 56.4043 194.692 56.6738 cv
195.073 57.4844 li
194.219 58.2979 193.466 59.2041 192.787 60.1514 cv
193.549 61.5801 li
194.727 61.6035 195.883 61.5391 197.025 61.3418 cv
197.184 61.5957 197.342 61.8496 197.501 62.1035 cv
197.93 62.8184 li
197.247 63.7715 196.634 64.7744 196.121 65.8184 cv
196.121 65.8184 197.073 67.1514 197.073 67.1514 cv
198.214 66.9746 199.349 66.7139 200.455 66.3428 cv
200.645 66.5645 200.835 66.7871 201.026 67.0098 cv
201.645 67.6758 li
201.056 68.6924 200.617 69.7705 200.312 70.9141 cv
201.455 72.0576 li
202.547 71.7119 203.65 71.249 204.693 70.7236 cv
205.359 71.2959 li
206.026 71.8672 li
205.625 72.9658 205.343 74.0947 205.217 75.248 cv
206.502 76.2002 li
207.582 75.7139 208.575 75.0957 209.503 74.3916 cv
210.218 74.8672 li
211.027 75.3438 li
210.792 76.4844 210.712 77.6445 210.741 78.8203 cv
212.17 79.5342 li
213.141 78.8682 214.016 78.1348 214.837 77.2959 cv
215.647 77.6289 li
216.504 77.9629 li
216.446 79.1182 216.536 80.3037 216.79 81.4395 cv
218.314 81.915 li
219.145 81.1113 219.93 80.1934 220.599 79.2959 cv
221.457 79.4863 li
222.266 79.7246 li
222.446 80.8506 222.722 81.9834 223.124 83.0586 cv
224.743 83.3438 li
225.441 82.4395 226.053 81.4287 226.552 80.3916 cv
227.41 80.4395 li
228.315 80.4863 li
228.653 81.6152 229.097 82.6982 229.648 83.7256 cv
231.268 83.7256 li
231.843 82.6934 232.301 81.6094 232.649 80.4863 cv
233.506 80.4395 li
234.363 80.3916 li
234.9 81.4258 235.511 82.4131 236.221 83.3438 cv
237.792 83.0586 li
238.19 81.9873 238.468 80.8594 238.649 79.7246 cv
239.507 79.4863 li
240.364 79.2959 li
241.029 80.248 241.776 81.1445 242.65 81.915 cv
244.174 81.4395 li
244.402 80.2939 244.488 79.1396 244.459 77.9629 cv
245.27 77.6289 li
246.079 77.2959 li
246.894 78.0957 247.79 78.875 248.746 79.5342 cv
250.174 78.8203 li
250.209 77.6436 250.147 76.4805 249.936 75.3438 cv
250.698 74.8672 li
251.412 74.3916 li
252.348 75.0889 253.341 75.7109 254.413 76.2002 cv
255.747 75.248 li
255.574 74.0977 255.312 72.9629 254.937 71.8672 cv
255.604 71.2959 li
256.271 70.7236 li
257.31 71.2656 258.394 71.7217 259.509 72.0576 cv
260.652 70.9141 li
260.34 69.7871 259.882 68.7002 259.319 67.6768 cv
259.89 67.0098 li
260.08 66.7871 260.271 66.5645 260.461 66.3428 cv
261.568 66.7012 262.708 66.9609 263.843 67.1514 cv
264.796 65.8184 li
264.301 64.7598 263.69 63.7549 262.986 62.8184 cv
263.462 62.1035 li
263.621 61.8496 263.779 61.5957 263.938 61.3418 cv
265.079 61.541 266.24 61.6055 267.415 61.5801 cv
268.129 60.1514 li
267.487 59.1836 266.71 58.292 265.891 57.4844 cv
266.225 56.6738 li
266.335 56.4043 266.446 56.1348 266.558 55.8652 cv
267.733 55.876 268.886 55.79 270.035 55.5791 cv
270.511 54.0547 li
269.74 53.1689 268.869 52.4258 267.891 51.7695 cv
268.129 50.9121 li
268.236 50.4316 li
268.319 50.0547 li
269.453 49.8721 270.61 49.6074 271.701 49.1973 cv
271.939 47.625 li
271.001 46.9063 270.04 46.3193 268.986 45.7686 cv
269.082 44.9111 li
269.108 44.4043 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 14.0.0
%%For: (Tiago) ()
%%Title: (TelaioCutPattern.eps)
%%CreationDate: 12/18/2013 10:50 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!R&B7%KTdjY-ChWr=6J5eRIfU*4:LEn,g+cS<FE=tSIA]s](r:Vq0RqunNb+<h'\bFrs,0Md;d:et*f"jXq1`pnP_lrFjmt?IS
%ELp8`m\)'Vk+QKQ[e%PU6+M=m:!MK</5=/]hZt6``R#">`/8R,()IQBN^g578+$+;)U>@H;-TJaF//_J1/3"6s"oM&bN9U'BmT&B
%^H_S<PO1<`4a8>q(2FVrIAo2p%%8sP*2.=%bqu`tDSL6M+1.h8_SbpGDJ'n*lMVF4!G(i7dXF)jpZEQr$@ntuf`7U>nIqUIs/8Mq
%)%6el_5,qRZ6Y\A%u(&RA`g<r/sDVFqbb\4qWR$AqW^ggPNJr.)SZ#IE[IROTK272&YGErb;65TA]+ihM[;'W:5JD@!5Hn_'bRtn
%X1WU'%EAA/9Yq2R@T4V5?5,@R_Ek*=(A0OmPrpDo0'6RG$I+8A6.6W[,8<ScPb._V8:PfZ^Cm-DeEf^>L#n`EXOd=li#p9a'IEcY
%*o5-=dc>l0SY6YS2GrW4jesEsAbIPqMZ"l2W6?>es/GY#CJMU>)+`5T5=[h/GiBVWR+Ft%+)*K1!K)m&Yr'*44^__:,][Sr1rI<f
%hZ,FV1,L\<pX!o=942/WXG3<IIjuiX49SBtK*:D2$DMK&l$dc1$'e>\;4;Sg\pOM1\GQF>-5%^*("IdKRXkRIR5@kJ!E,E!e0.[g
%KL\Q@_bP)+5dQ#0nfS<\1^*(/O1pjVqB,JM5a[Ut;;d2KeHfLF%M@Ke5Ha'[nOBoNLPM_JBKeU!IZAUNn7=YUQK5TG1u$C+F5?\T
%g,$LaV_mVPe`P\U'PVa2r["4FJ.p$L5D@_ZTCC`6oNsQGkG:sVffB,D[4qMWlArpf@'-7cm!'S@PHc(bYh"TSM$H8l?rsph_NQ<#
%98B[Z\H:NUI=m-7L7P:J<W:GM;/UIXZM)V;2<oC`!t?C+UAaMC\sYAm?4UU&-hHT3kAE-ACQOekas3JKPF;?oIg1b\fa7aBr9j^5
%2>d@?f;(G+m^B7U><LLKft?WCMV=H`<Z$gW1h;M_r&=*f7XoT:@$!KQ($V5-%E?K`nC51AA(6H`(5\VDgfOY8-`J!$iMASVSTdKt
%))@VdJ,76eLgCK[IgtpTScn',E!/jj?8VtN-NoKG>qk]0p71\Y_iG'lZXD%>nVE$A$<n14UNeIJ@(0j-=6tq0WJOrT'ta23&,PT3
%If"])^VJWO/j1k+Pc(hi%r^R4:E@5#lb)8K5<Mfi]''qdSM/@HSG-Z7/r55]M2Xt(Kr$AMOoLQ#]iAFEl)>(;ZdQX&qgm^/JXIeG
%AGP:eRshNb'#I7dW\%9tS"2b0@QaT"ihb<IXL?qN1jYNE^`F+4PNRe\<O;P;2"F]]f*W('R/08>a^*J&*Af',P\h6=p&D#Y!6j55
%LI!(eF^"C])9C>o,H<XEa[CW%gPF\1aZiD8dq.VJgesW^`ua-qKDlECKL%aq\ukd%!g=\BSMQI$oD^5+/R]h![D*kORRffB(ZU@D
%!NWTJkf<$3Udaf`hr/P.pp2uK*lIQP!=&$)%=S7mp?,UloO)F_E<s-Cl).?62?*E$4f^iA95_8h+16Gn`tb)nY+bm6!*`_KhpZHI
%#r2SpaV>kVMh.&I[j`#\1PL!aME=j\S#sEcC1XoCl2TWE@<JE.psZo[5^iYO!ft@SSkj!o_1+`KrMq-2Qo:'sLMSB?6hcc?Iq%46
%62rfgrngo%e'Gf."7lD?JL7#_]C#WBe2U7oO]X0[H_RuIZgTU7DlNX,m:m)F?2kT74!m3<`PgH+"8o4SR=2[cT@3<q0g'<2A_HSP
%G.2)`,K%qfN0Xq=+'6AVk<C^Qcp$.1aD!c=d0r-sMY&om2]H!2Dt0\(N)P;8ASj8rZmE@BpttQj^tAT5kSQjsAd@+n/J'.E9[$g5
%adKZ%3MO"\qTG_bl-9MTIG56C$h&l,2S?*-bFHte8'B08m4+1&'dcX;eVQ,JAf`,tUm+`Mc-jg(C1^kir[D!kY`J@Rs3N`H7T%mJ
%.M^EV;/'(c>P7%NGVQ(5]CJ(^%p^3RL)JrJ[1gG4EJ:^BRHS?[B!"pOdda\A$I6P6-<e(-a'rl/^+8SbkqfQNn(0tUk'LfTSH_gS
%@.%MO:]?S@GLGA):SH7.2-\mcGP7)Sj]5;[Bb%o?bqI1;*KAIl=iaL#ZC3^,DK\'%=IFt2F4rD`2B@ijk'kR(=&i:QW`D4ADF?@0
%8eVVWU.]([b_+?;T%iCL-;D)O,FP5L<fNSY&@Q:s0^n$IXD'[JE`;A@ZcJ2(3iT4&22?Z>V_oLH;X#=%OYY.?\u%U'iMbQOc"GCI
%UbUT#D\pu/F!cG`8N8T&;B)C\Bg>X&9%.^</U5pd8l]2+.Dm[fo@XsO=Rm(l%!=IB%]A>6BVkDe5^KmA>^"F0@O_(c/cpJ@To")`
%Zf8XT=1S;Q9r:/X4LG`@b4DUsPd)_+UHbTs(aY6@9AX@V]47K?Ku/>W.f'3';i;M9?\+X1GDD>o3h)(SP2"hL=F_kQ'X@#G^(\`g
%n=NU*#!?WXqorPRZ<MQ#UL'/\jlQt2<Z/<7IABl@U_^<&%:i"nZb2tbq>:`A^Bh5.YAm9OW\>r5$0u8H1nnuJ!eJ5G1Yk_aF@Q7f
%U$j`$fcEjK;TE7^T'4^<ApdA!.,t>6E34)jAihZ#DKj$PkgL]!0h[RI0c$ds,uBgiAh_D_Ul%T?pY_c1UK.NK$sN9M4Q]re<O:Ri
%dV[_(Na!W/Wa=7Xh#]i<rijDWbkB`FD^*"_V\0oh`$LDC3`%is>P&u\YH"df'HLt$%dj4cO'65WfL(HF9q$[m8Cn6@mLV&KdBor/
%f#Fa6g_hX`:+jbB;!*jgaXR)Jet?B'Qq?XTh&Cd(Q[dSjr!a!>mTu>=4'cA1cs[boj#cONq5k!e>'.%N]nO.OKt!B>6'cGuN0&BJ
%E+5A\0cj+7Ei.DRjA;b7]VVU-,Z+q*boOns5L)!,h$aT#?XER3L3>\]Im!N5.(>&>+<pkRK?(T[UhqHu^6aBd.k]defMK1eBZ!9"
%g]4WEM%&<b8)bkdaCt,ZE?9\Z8PT35P\mlYQo%Be[^>(e:?:GAj*pkI#J#sY[>.[NhEn+X37F<0AgsTaK3i)Gp<T(J!]qoTQ??q0
%JDrigkAV4$oSp1efkEKcBk(YTOA-sJd-=B7"M1tOBZW<_4H0cGY9jk$g%9$?L,6K1lI;e/,E:NL/Li\Xa6>ND`$uA5T4KtBGR^M6
%Jj(NnrB6/Xr@fa&5UYV_3`$>M7cX2U=c]Nq#B5aLI&.D0o_t#M%E9-m1*<s\.1=qE3?2emS@'ku].I%5m/a1dI.rb,`:GCb^g_iW
%e+(*IC6-us=23oo`gJ6*1S0Oh]@qjHXHA&E+E`No#'&kK#s*<?'"1e0>IT,k3pWi4#Q#I/B=*>ikWS#2@^=e%2!uLconVu")L'th
%Qfh.oKoXp@a"BDC&)-&bk-F;H;e[sPE:,b1b[$aE?Ir@n3DmBCdZ-LUVp]Bq^Me0X9*_pN9tOcMVFARBkmFna1oV]ngliFda,\DY
%X#h7WS[9!o.sIGLI6TfO%gj5FRi0B)30B-1C-HeK<GsECTVDg6@@PFgJ=`C+@D><rs&!@HVAo6m%FAoR&"p5c*4p/eP`AL6"h)\(
%&B2dEf9C*rnY.3Sf$-iAH*cp4Q\>]TmEqZBYgQC5C2tZ'a[a`b(W*(]r?fI>`hi)19(oW\PGo4ZFmfQ9(o]K"o[\/?Mp<!2Zb3BO
%6%AC4rGbu$M/jEGFin!3-7O/dh*ANImq*F#Hn+5Jm4A+_Bl2&=j`p>V)ER-`m*6'%C7-[d&b+;GRE5hH.3%/WZCn7;9Pi8PbEZ6u
%?CS%HArB5#l]-#.Dj^iA<!8Lf9(oWVpj"oC5`Yd\3NLgSr8X_Noq%r3[q&$oCH7Q:g>=5M@S1PVF(o1)6LO##AKgeT3G0MMjsFf9
%<1N$-8i?`"b0bG\V\tFbSF]V$F"KU#Eu*/>=%ttkC:U[WGUtKk<K*PjVq6\W_;sXud;eb,FNtq6LU65:C%.\g)LB_fhN71Sf54!S
%qttlQ_!`StpSH@cGFGJC*aPWjo<qIH0UM;3RcF)iC7>1EItaj"o^R8ROA:PMe+E9aM#s.<EQ(":H_&Kg?fdbL3lst$>k]Moc:9'K
%?OO@nSN7l-o#667n6DFDJ)7KdF#]C%N%3<#=`*jQ9_!K$@\2>(bl76q*W]"7P<*Vb6JE<p:Z:9pjY_+GM`fX%-2T"Fd`Ghc/Y/7u
%#/P]N?s`Jj3hLp,o;hZ6\=VkJh]@Jf5M^f]HtL-+\SpGp2K7a;0]/`X^ZjhDdA%*ULn<bc^YVKMgYm)MXE3OKL>tMqR9FiR-kl.#
%m*#Kipu;aj$glT+0DE^KNg#k5p+VlI$@N'+\YK%2:7;Dc&*J;sa6e&VLOSOn$_N]&))Y,WS&1u5s,lNZT6IU>K@?Ub,ksFH<,.3'
%BE8&(nbG*nXlPNbhU7g#qe-O'\NGlZK@c<i+@N-"ChD*ZUP$5_Xat<Oc_h;h3T3LA*a,M,kiSU6Qt6'a`"rnTftL9'aCD/M%aqno
%jPFAi,fWZ;6N6>*hb+9dd<dSCd!82:Xh?Y%2`3^J+f4tL*h&B2rfOr5,$(PG4[1#h"SABdU$/u!bC$[b4=kf2cP(td7h=H2'\il=
%:p&P0%f[,7'pHdYaiD8PgclT)I)s[%3cbK<r'U]eWBuE_T73=ZJ0%LLa.8j'G<D?5`;o?f)cP-LYO&eh_OF:%m5qjI]d+)s`OslO
%"1('B9i!eKRK$u6md`TYr+GZ]\'Sq4m:Z7GrJaoBGe24+kH`Y9B<D'#rd@G4P/o1U^MCn!IHEW;Ka&QFaDt(ElXKkVZ'"AOnBp:B
%_802-pDKWTLT(eM\F#5sK^mdbi$*5J$!\29rm$5A*L57I&jRWp)b4dtV[q$ZGt9AJhFo$Kc#tmekHk!Di(V?@32'*ee&8;=Wkf%R
%cClG?_K4nuMtoo8k,I?UR`0</r(%Up+<uG60KTp)c1>LW/igK-AB<bOqE:BZ5,$AcX?*PL16$>nb=s`O55lu,4te)t.XCd4q"N[0
%1*oDMnFKj].f'XqrnKG^gFECWOeOJ3YR]qCXDDX*%MI8JXKKA_$uXC`qt_p=L#_n*D+8b^*mO:Q/b^=q^irG*E2Y'd9oIYf/olIh
%F*H:DK!It)q.unaZ_A7[-2Nnl_C$n+!^e[gmW)0PB%<Wjg-74PA'[h&<Vesl./M:u>j]jH+WhB'I/*O=l^eAfIL'A`q<5jYOStSi
%#20"F@?e>"IbG#D(I8MG\.BQa0u_&7n<1?\r'#_ah@?l>Yk"op:4N97W6>@WUMj9](*9'iW^[4%(N4M61&Z7cK_545^;YLbB'p2`
%;e*S[bjF4Z5Q9+B-a@jDm/fVLG8QlLa_]9^mM;!4g./+<kM&7cA..$*6?UaVCL6M$r''D3a7L&PZu7:=!J+-cTgS`&G^MFJ"T@05
%Me2-us!:V@36s$L`QUh5=jBI/bJs_KK?@VgI\&JR[J:i@5K01U:4niuHI>P.b#:b^e7_!jHCYu^_F8O,3hO*]W=.UV!'`MIl@SG7
%jPS8K-R/K^P_->URV\b6ZM4l^L@!VnhRr?+jjZ5=i&ADQQ![Eq=#%dHA8(!IoK0a?hgY-:(T$_*6),$JHBE_3RR,d=K-4NJj1O!c
%/*+c.+mL`q+9J=#7uBSVZM`CEgnm?Sj2,KVlXhb`7%:G^OpZC5SiiI.;r[KAfl[pRh4MQFQOLu1N8OB$<Z.=<+daCYo_I]CL%:h_
%R>]E/B?PUM=.KcK9^$.,Db9%,OK.r&8ZAdHE(',ls!\<b(*A3UOU/SH\="*p#5L1mV"3%)-^"p$2`B[S+</Y`$99_E?5E?j+(-p+
%r/uhnRA"YS(cCSpa]C#9`2FCll:`uE**uMSC+tV-&?AePn4UoS'u?*=5,I=_UJI:tC1[)^OE,hYL=MGa<[N,%XTMI#0s2U0DGZ*g
%ftC?u0\;rX_%Dj-c+a1?]H4h.CC)5W(1k9:e*reqf_t`UqAUIg)MgN,UK=3d(s(Jq>RZPT,O#]tJ5:p,+(Agff(5q?r4&gUMV^T$
%R5ITO-/tp0&DdYA-JqH\mbNBS]'kW#U##T/P\hAuA&MtZqf%>_7=pR[gd0>V1#g$Fk.ee4;qWP"T(u`9UM#D'W4hi@O\a2LcYoHI
%(DjhhE_+l<PdqgsYLBoR8IIPfrUbUuU']i+,&p'E)p.S>EFaM:h=\NJT_^>pZpT&b/0A?<6tf/)>@2Y):akW^(NuIskG$6@`B/F+
%?PCg-kug:LM?71j?Q=L:DVG5C-OsGjO.quMY8K_FEhL47O$.Co]XWc&YQM:AnDYX4;;FN4:r?scEaWa?OPbD2";C5o-=pa0mLOW$
%g[oTZ`?)2-.NR%=F+FRV\(-;8r0kCAnje5HhoafO?NSoMK=;_AQ)X?f/Qf67$rsP(Vtc0@rp3-glC:4m#@a8["dre%Gj&5s1=u7:
%+SN$5AJs#IZ&:VQQDSmjTWNiE[a0H:i7J%Vki'?%WR>q'e2rb"S_YPgqP+M7Kk@1ODG([ra4uplDT*rW8KK>'VNe(Qdm86Wl^)MH
%SmF5;H`sB$ZZcEVpsnDj,R9_"hHoXIeXHPr)\#dMhBFZ3#gre-hIR6"Q0K`p/X-Bq)r@nak/=;bct&_?F9[.#:"?ctP30*iADoD?
%5nT"CDh5T2@5pd#P;s0ZEEU"BqpCb?d&rmODlW%Oj0&ur'N4,eK?VS?m/_q%l@[,!<akU`O:lm2<gB\D,Q6'_>+1gTX38tFIG:\$
%N@((4oORN@cQt1c:GIT6lLaiR"b8Vu;p:dE^otf3EgE2-.6;Q8obuuOjZOh0?\GflGMI,4RusJR67>"M4YITRrX]=7lOa2k:hL'r
%lF'f2pq>QuXDBrNH69"+Dh<b$mpN7*ekl:\i_J_&KiCQ&S3NVK4qpRmPT+Na-$Rm?Z2pE+A^'Y36YmBTc=Ya%B(\9_o.hX@6-C+>
%`R/>$472Sur=FDYVkW[M1P'Y1%3XTcGeocJbF#,!\ViZ>P+^jl/#3@Hp$+)L;5ZMH>b52*Fn2)S(fEfL[gV0m.@&5EpLN:u*dLZr
%3FO%CgE'."$0gJH;HQr%7^N'7/Ias\6gT^2)B%_gIJg4oGX$ERo"Vj%hs@sN1L]10oRRM7pCDcliYf$f?\MPQ\SLhRYl9*f+hhF&
%.ppAK&fr^H25<=$]*_-<+;Nb:>7L((Nfic*oG?4Il8?KT`#DO,O)`i;;"1f<l/_+-@K()iIEBJMSg'Sl5kQXKHP\6-F`UB*'='d4
%1EdbUfta+Go4K_A!:iBmE>R!PadNt?n[l^;>-Y>V=O2HubHh*AIOK^6oD>c8UMBns?@3dc5Vg:6j3R\X[foeBbj+T&&.J'#UqK.e
%2/Zs^dgu>^R>/9Se,8=hB9aYJ$F@"L8D*Fua@i);P`c@^c/dlsmcDdXB;0`pEs]Qe-r\@Ab5nZ[)>_=(JEHWDo^_:slQIBU[?%Lc
%?&kb*Ih1_u&m&G\h*PfI9S8dmd@"1>pf8<W!_93HO/?_/A8,rh[cR'aG&L.OVc)q4pMaj[&7t<?idCioqY(b;3rM^]N=%'`!ZZYW
%+,@]0-Pl:bJVAEdo-_N7E\cOU`,l5eRE5+cDuR*:1!4W_pL>?'gi[4r3ZD3.&tU$fHe5%d=M4Qjd[BDhi?E]?*KtBO6<hm)SqP'C
%da76;nCG.mIu5>q_Qu'\1pL$XR2k%60CW;oN4uItLhT>@dC^n*kGq?AOEGk=Le?rcB<@stlt$NJ)*tpSra[8RGr%lY>1OT!^#cq:
%0(\d:bb`'lbPN[Z=[nAD1=f_dJY2SPh-%(Obg-Q85VMTnVA#$==#rO:1iOqn!_n79#Om+l/60I@N`GfQN)5\6roG8i&kZ_GDgn=>
%le60[TJ[*UPiBFY)>Q9d5CD>4$/d93I%HDSG/EL^ePD7qgu69o^KV]?PcYmAh>V"'Zk\]DJ3>___,3Gn/\QY4m$9Vo,N\6:^AL0c
%k!Q7[+mIlK\-Ikls(2MfWS!rlh!BVQlTJ__lBq9rdc1hQLV&K,5OTp1%oT#%@O[mCh`aX;7INZkZM-Q+IuYif$b7"gNdgfOk0R$]
%pNapHb=IV2ON/K:oW@J+(&+>L\eGhDIHO8&!t"l8Od@l5m>'l(#5>Xk46o#'!;%"?Ml44PHq/b+4K-;Vg,9N^nG2+LamgT89;S9)
%24\;%)F*VcPH"'n\L:JH#_))-#t@hAcnh<*k6dVZpu2LW%,(almY+5\0/@a;7V]D7)&Cr2+eT<8r"f2kap>Du,0WEfRMf[#I5Ybh
%q\O66(d;o=W3=-NO9OBbGNa1WA.?tjb`1E[d.6n[%$pM@0LIRm`>]Aj&$"!Z:La-AH2O^d%ZQRFa32n1Wi,`=qb_JrJg]a-k6-FQ
%%)$6L6@'_D)Tmd_O*2k'^`9>6gI1fm3RPi=jsi",IOa+@O$?<X4s=Wn.;or)<:Yk;mhLqsr#jI,8n_"1%rM#:RG1SMQ4I:$G#S^H
%2qQ,/fGfe3YgD7gh]UA;:5Xc#D;"9,r0D7O31N23*#p"dFT98E/s:oiE!cBQ&A]$?co=!'a,br4ohc9Fp`=VDQb%kCGd.dXM\.Jh
%J4@HUQqm@5IaUM@6`\ln5dZi,F&rP8!umV8CAKLHM@um`1o_5HNPCJtR&anE09K4]?+!b=d?!jk0_p0$Gkrn#ihblJD5;rF^@Uh]
%NkQT/O/9eR!(MD&-W-dj#M?`.)Z$fm)-,i^'5rlF#Rc46n+08[$r5`:3rYXB'=/l("nGOM%;h.D9+K*br6f$`SFKdfR/R.qYKcMs
%bJfjhOYPu$M@qO-L)q4O;NdB7=ssi$o+`)\csR_C[-,&\9KX<J7BRhQ&i-[e6Rg4O3Z\4Yrp:j]SE@u)n!D<P$Ggo7aW'q:IrUV+
%eb5QYY9?-4fK:^\O5KBA,8G*J'GL=[K@58;JJnG,B5[UO7tXEO5,G1VVqq9i3=F9MQQ9:E=7m+ioi\e?b_IT`=51ohjM,1%DDF%u
%mII765QS`t^i(r1Cb%iOkpfD%WTm(&Bi?>?W#c.=d_]lC+%?6&hJtrb1J/imID#S$eha%W:8`N,@%)X][NDC88l*c/6^X?G<mUff
%?*<$goA[gFr#;3b35WL1GSn$Pn77Uo:>rDPaYWK*%6q_rhto1Hf%3mMEs@`pbQ(j9inT7hmK<6lmrRDqr;]gPc!5au8D7S9mU!EP
%fdHLA58>%5i6dYK7%F7$"Ih9GVAUk/2'rs8Qs\OAjBXsrNOG%EqF*:U&"OkgLKu_T]P9;gac?8`"=^K\!IUtb4*,gI7f0>qFi4U+
%5h!t1fF$m)\G8,\5p:-Qn8hDWLnekHrTX2#FAKDadJnj6^OGuUPYJ"LC(%]<T,it"D;HAX?MaV+@<cr/_u[J1NI:oC^h*$AUjE'O
%&?a'gZJ6ZD-:FO(*r=%7jei.YpS)qZ!YMdMU9>hZ7&WBXS=k#R9(YmLDr(72+`82@*<(R")VDl6DfXb":,maScTR`P!/e=4h(/=S
%Z>h][e`Y;8@"BJRc>,J8Mdk1<TljFml"\XsqAD:,jUTRXX3$T=&Z8uT,gB4-@t#b%BR]l41;d%/[J8^-A'grpc(B>I.@i^=GiSbt
%m(.Sf-_Ba10H-phpl6J9MV^=j:kBP[It#3&9'5sF`86ua;bJjM&M./k79FuS&?M_?Bq_(I"/u+7n\06TGhEnJ*`40l[$=K`5OtDV
%qej^kQ2`A2+#>aFXiob.?-#M@"_5(ffr\jh\mK7P.:(6rZgP=VAPD3[/o$"TN^k;#eU4W!Q)d:A70)P%C3A%pC;jRR%Uc=kjC7r?
%B\:.6c-JH!E7Y!S3gRO\n)?"0k4!ZEc-W66D1%6C)U=Ld'NZUI/m`WJQa_707Kf&)c$sd1RGaQ[PP>=c_cWJk-XY,ZrYiqOX2C8\
%A6P`m--%gWeh8\H)0I-+R3ilAM6j>(Qed(:JR8HJ7<dC(`@:_Z"068'jkP@`_3rn%oF#SYNc/9bL*HrW\L"Gf^F,e-ABd!T"7tg$
%f=7cW#]G?Uq.hhO<J\L<#GgX?<ANs`W7@E[[n!NRn93L<IbQgMS4a-(hoh2E!NXfaWc46oDg3lV\6c=i9[fia2_eO&<L>:a-c8OK
%g?;7`$F[*%E$B`W[A(gg=Wa^UWhLA*crYLCM7MbNr\dPR;olZhU75eJ$:U;)7JU']5Kd[PG6aH:#fk*)^d9C1Uu.8/7MjPkXhJ"t
%7?hPgB<.S#i]$;'&h]K[,E'1#%EVfJ\>58FUrubKZtuOtE+D.5dO+B8[=X]h*/R$]eso<Uht'-Lf^/=>iZ:ThW4'<Rr&g6=ELZgM
%h5!-BCef;;jED/K`t_jK[u`Kf%;3/+hp14HlFB"9F%7k>WldcCLq5\HbA9p_#7/=Z]mfJ=)`36Rh5`@/Q97daY%Ob>)s$h\>8hgb
%bs.=a22<5N;'<R7BhhO3?50/`5q:jpnO=Y[V\.QGUUb"GWmh-Z?]oOE7P08iC3GBrUF?>?O9^k]Y7;lJ^1SYnU+LZ%p^8TH:VZ]9
%qQ^ip$l"B]=%qfEDa`I80TV-'FYGSZ+jBX"W#L0Mkdsd>I+Ug\<('upW:m#K?ETQ5n(Oj'lp,sW7N0)94A%2IAX&+<J;`\Bh'#Y)
%AM;;Kk9]e^L<b"'?\9J&(/dk7r`opDMuXJoV[>Z[noHAN1_>&HX9@#!4):kS[U3k//tP)TXr9-#<\I%P@2t&V8?%Jg_.2k::O:P3
%1s:nV:,C#SH9:_"Z"h1Reb@s1qPX.hh7odM]_3e^M(`Kn"MhtC-`5WR&Adop)Q8ZkICSkR*XUM1>m;*=`BJt5ksHsn7>$rCi9Bup
%7DCQ^ng;1f%rSc3n:P6EoPTu>Iu:(/H11I&M)Nd[g/B>CEm&rZrG;;J)ibu5STJd(eOt5e=3mU"o\G46+.j-`E1X"R6^LSoDj\+H
%W9?h/L[iEt3WBOIAYteZ?,"@M?@Sd'Cn-LVchu]=+"P0!)#Ym`DFg^:A26`IZne?FeTq!XS>P<-jC=uFHKH7UPLjFss'2Y_'i-S4
%D*!ajL'eiBs!F*@#AsQNKsr#*4JW6e&bcmd(4&uXPKE@e%^:W3W$k`2#GT[*N>H4<bkn>_89GDVN;?_54*dTu8H9g(#?)r;+We3W
%2u-c*3fTK9q![_`r)r=&lh.n&lg*X!o(C!@CIrc3--k?lQ<<&=YL)Et$*fMUmp;4gXKa+c^<)U'Qrmk#d]_FYP6gAS!KE+aH5*q!
%gL-"hqjL%JJi-T3r^7L#^ni@.h-pU8K(jt's-;,RWT)`Dh?GLFG>PDQ13QbaW7'Po]oI4?Q]Gm;9B#Nj=Y'&RalM'G-EggZ*Z^Y.
%bT>+,*K1^YZ;iU(CE3`R)fpI^&Gm9A2Y+_U>ipWgPoD:\e9eK7M`')#hOWn5$%\BS2^e'L#7i^pMf!of`3Yb3VjTKp%P'RV^l;[c
%,O=;8GC@pbiG`7[FY`ui&,a/jQT$Fr<)G3BFK>b-EGG5`&!LL=XBb^`.__0d/]YG,S/rdEU(9+3XD%(5'UiC^%%#j5P.oAr2IlDL
%_+[i&&_=`!LMr'$;^(PA"KVYc:LbG`7EF$pXS&gDKU&`@H4Md^_J?>g)!c73Wk9$T<`fCIFLV00'mb3c4@X/,H5W)lD6]sbNEjI-
%l\hC8-)<!0MC$NcjGWNn77R^0/@!bEVoQ5JY?oE8=Y$T+&9'9_lJ^qUDTUtqb20f)e`t()Ys).NOY,/];RFro=94E#E%e/F0q5Vf
%HKp!)J,IAi@XU@U"g"pP%?1oX)O]9R%?k-ZlL"GnDiOGTqWm;nT+"h2I@EZC0NN".(5FuM"qR?mYSO4Xc#;#KlZLoGH-&a$-ER!,
%"%$8f$1g&KNgIG?=&_W.g>&6aN/Qk@14O]1&D#dVijmo-p:noY%CA5ZLF3c,E'FE5q[1oG(bf*a6gF4lL9WL(.::ba2):SKSaR`'
%@3$jbUZdS-`;@-d(BJ;t\tBjH8"tt8e5lpD3:+m(YE*4qDmRBmJ]%Kai,SSR*2*DOd7(`n:PXYHi=B<JcHTH=h,D(?2/s9aNjX8,
%4ZH,EXR,2"V1Ps]2"GV[?Db!Y9,1m3(79Iq*pu5:DU&54Z_4?HRF^jkGebZ.T4[+S6eCcWYNM2lk"TcW3dV=]Cn;]EkiT7`BCurc
%Tc!>AAG>]ZWMQmL[t_Olgo"#)"l\,dIudUaB(^7*&[($61"0',"Nn&RS5)3Teut\dHILK,Kc?MZZf?tMo=_-rdgHKt-WPc7f\E>+
%hmc:Vk!q=*00ZECi?<%51k,*kX1"9"=Y[$Fm;!@R?@9m;hD\dK.@[5,ha9$lQo7+XR9%E6*qq&<XNg(m:a=$<]imY6bS5P%r2efP
%l.%@@dQc2M+_]?`l"@e,UQ!IH_=&f-PN(.hlYff&[MbCg[:7ioi'e=M`Rc'D&#sZWGhROS:3Jukd?\LpdoCCrHS&C8r^jeO+8q_s
%>!>)o]]hQR]N;"3:FD?i`XSSLdl0H4l4@+b^gtcoDmBK;F?q!C16'-"qf\45Hoh9up]:[lmg"<Qa>E+"iX_h,"&8aeeC^B5CI-nr
%/$+t;hZ(E\N%0<VF'A&[=9WVt^r%,$32XB_r9^7<o^E?qB;9P2otC.`kdN%!;01U`70?ejVk,$GQ9#oVJ=Kd],LfR\0B9qp#[*e^
%3#IgrW6_8oGV@c6C&,U<gFYZQ'K%AfaY%XV;@P.md/Jj.b,IN>=bH<s*"97KDgM[qJ4.WW?gY,d(>m$<=K,bq^UCu$UWWK4+a`"k
%&K@t*h]8qe]J4c7V:)0B@:c^e5p22SpO;r6X,==72_t2g`6-X(8IjXRD[EM9_o"VX.me=4^VA2/S!].FDJY;tX4QaDmM<Pcj75#N
%`hA(q<er^YZtS-$D;&I<Y'PpsfFA_p.CN?@PB(T^iK0("EB/uq4ZbJp/KFlt"QRP;.?ea/n$qY,]dK5UJ5+YOlP$I[IZo&PG<k@$
%1hp<=I[m%!(,<HCncc@pl'8mgi3s\H%*pVG<9@q2^N=l3Cq^<,5>EXOeUs&W3;2E"\)bE+*eLOWHH@V#2fH#fC1<DGq`8r`*#%8V
%7_bet!W'(!@0i7+@VTW`.!j"aJa?/EojVJL\dhE1$4"K[:m8IHY2m9PcIKg>[>QeJ4j*jo;s1E<"8i6mKHUh&BY2j8O:S3lCmj3)
%_>;T.(&g<`Q>@VX#j$2=:Y+#`QAHr168jLHa=NTt3uEi-0@1S*COo/j^7=`ga"81?>E&'9^8P.n&C?Mk`'9\dH)kZ/kE%iT\@Z!(
%LS7@0BMc?p-#IX`5jr^.R:#CFYZ*uf;-2eE"1/;[R7Ck+\_-6GU-=WeTA7SU/mLHd8GO1Oc2FF.9&-mcI?Y<,NOdr83jW.$RLR#*
%>,WJ\R^GuN2)cj:B]D$d+[EAU7c"MpiGDcH@'J3E/6s5FcC4Fs/A,<8*%Ab)5(nBtOK$q;p(^DoI:8tj*L<V\G&ZgInO7#c_3rN9
%bjO)rjm50qf9..#PgjO)lf0`kRUKJ#6Tcu:SQZP`NE0Q2OR/3+iAD]3-l["d)T820Wf]ZD,>V'7Wq?.G)5HAgfAk+g_Y7kZ\8O4G
%$'>90FF][8]XWK(%16..0lrh!0dH8kD!k>Q>qA8(eL(`HZ`*Q&RF"bR,l^^'M]Q'F7Z6*1RSrK;).s]_:fJXaITm(KF8(j+'p.YR
%.!T2F9GZj1Y75?m09^f"c`Ms?b5*[%1\7sjGGA'Lpt.DTnG<+%;=hBL67(ur<KE"qQ>2gHBopD2af&YT1PO5X1s*H+I!)@07LK4l
%/[$tFcj6C>BbGW\XJ\gU$XXDUIdbt;PZG2BgM+%fob<D?Qle=Y"GUVqk3KRM_hi!:=A>GIJ^uhr(7Y]KP3*8.ZEV9(0]NX)L1Vh1
%Wt//'p9qdoUY=OgBh%Ku3n'<eQm-EAp8K)k7^ls9A.#Aac8r6$*W`!KQ<L"N#[c1eVgXhI?#O#Hl/&nW"&Ur]m$fQPY;5]-cX*[a
%:<OToMmGE*4j^a7#4/BHaF.S)gekc1"U:6l"1S(1S'e%/\pCSd2_LuM.1.n/U,Yu8`%9@BDCAZW3nIia1'O=KU.*Mg@JMKl<q`N/
%XVSLk>GGA>gitU9,D#UEDonfb00`YMK2)4&9\CsLXe87%(((1Z]='O>A[;_HCT7GAdYP=*F1*Ap!$aU23A4c%_UHHJV)-`bD'BdT
%cd-\<_H#a9i8tuaK?W*BS)00=_9/hmGmVIH3%%8a6MI*.lBC),]9#q0H7n0CgVn%L(9(^Vi`BpuIZ6q\nSp<?X`UYnkju?Ci-]f&
%lJ0&#D3HDD8I+aYpRTF2Fm^'0.I;KbAJCGac7Ta?kIP`<$2!L#'nG7aRg?ib^tL9/03IKs&g;mK8t,GpAXC:aHf9-=kAqG24cIB0
%YK-'h^RSNbfJ5oce!R5"0!WUe!/'WY4!oM*Pc,`O@<Aj';/",9Am^q]Ca8uAh5FnV[PAAMS%U]4Vtk$^7J>J>bIh?fqo0FA]?$G8
%[?XEqias.qk/(pLf+@\pN>FfZp-%#%A$`*-#HWh,+Z)q,Ipk*bCT2n?qQcLA!j9Q_kO]s\J^TLLNLPhC,ckUE1cJM+du;;mmgC$E
%Ktt3iC<d46H1dR.)H?:I],N/:+#]+)EI65QH4*#s\lgtLUcE(%&N"6$%@r]*>'doVaPrV/Y^tk1iGq3'?ulKlL`LXIB]GqFTtHiC
%rM50S"ji-]ON\)75Vm:7Y%1QB]8X%XXprWa-YhDep4U(+D6cEB-YX-sG.U3R4,%jL`RCANDA%sYb!TCOnX=V/=D52@e[:l`1'Q7M
%(:;i'\$5PmhS6OMB"r,W=\kB2:^@uG"U?L^&O^J[;_;s,V;9_M!r&a22p3`W#.1pa]AM$h/dBh0h0r!qdd0/TAI'.TRnVJB@FC/b
%gGmrl")7/4k[(/RbRoNMWIX6WR+nq]DGG::4kRd/mW\G79!'qQT"JE)klS4l1p3n`CmAmd]_[0do;_dPqW3O'c.[%C3l;MNWGIk%
%14+6rOgB\T2(Sj`pf%EO@d,(?Cud5QAA<_4rH7G.#RkRh4J@sY%&mA>UO@OF`;;KLlK^)]NZ/1V-j3a`d<(qfgcbcr2^,'#EARk@
%!,^co9FbZ+g>@KbHX&]9Ao6*?2t?kV:__s"R9=mDo)>ba..N9A+BS9aff3`hVR_&qCgnJ\`Y"b.&*_)27C-s1B!%h'B`(Y,`f[Ks
%jO#OWBSW^>!//&?L9(Ssb0/6o[t/"F-,-5a-WnjE!6s':FQ!?)W7]PjK;7Qd12V9oFuC)cBcAfj\QnZ"gT[n+E'A-mHaHZHb>7Jm
%BsM'IMEndUB-p7dYqT+!>;Ki_LUOTiXf4Z)B6,oT+YQYN+5s]hVMdlt!qttZcT-5jH`/P%TRP._L7F`u[XSjqR;5r3c87J*BY.OR
%j(r1U2B;F5KP'7gj<@HVPJ/.Tpb8cn),V2\3G"Bp(7B'9Q&Ljn7E>_]/J+);P4@Ar$f98):CYk<<P7:8\7&C\#ACPEcKAHUBA/GP
%^RWW\Q;7g,2_X?8Y3"DX.U?;USBna3DoYtk\:-H1F"JK,fhOQ"F"Q:0WH<.IE^&Yi5!ZHFE^&Yi55E:@(<ZHCqsE;SX=]\.3S3g>
%dWV+Eo/YFnWIERlE^&LaB_tE2Z'?^)I.H..(b,Eq&l#e@ip,K5fidj/QHr"I(?l<HG`9+X\E)l<$410L<HXSulOH"1eKasdCb)d5
%U<I9?-sOJu;-M=8^;[HXkQ!3AnH`^hG'O[lq[l;`XrGuO2sgf$Vobec_E%/!N2FSR4e,DUZ$t#ig8Tj`okcfKZs"@!$Kk%r/RWe@
%jLqdg%6im<Wb"KFC4gU"lh0:#9?Za^#;0(N-#3-cdnI)OG%\MUZOfSX/\>6QI#1F;!cK'eLroF7Bp=37Blt,I0<cWWirLe=CeI(S
%N_e%:\f6\'Y,8t&]2-_--A]`F?(Q5UERD5_Fetha*MoX[D+3RW*'hndA"<2?bdk1D\]3Q:7\s%hWaT(Pe#O:os6tP=0q*Ld_6tEP
%A`i>hXAi-^r,i1p8,51lgB5]T'4#pEbJ$Fu2*3t1Tuk-q[S5N[=nX63[HV`iLZ8<]PP6TW'FpZuL4B>Kf/87TCNAbf@`M;JX?`fq
%[j,8V^553cbUUtu<b>:-]e5.V<b%Ts:<L_s<4(E69JbghKuq1TW`a(Op=%TO0>>S%b:/]6DkH?;.,?]F%6FR$mb+is`4Vl,+%t2\
%lu_,ROJ<#6cLKgZ7bAk*[/6!iPHF9pD?9nTK3:Z$L(IFYDB$$G<I8N,P/YFuI8FH]D!++m/E_if:8LPYD:u0]I/@=i8"BLFZLdfn
%G-k&O\FVDB[qR@%oJ"UW<U)&&99/+'C9>m&Pm#,o/>Y@'NjX0K$HTq4bA%[@o@&5e"1JRHh+t@ge]d3"h)\X8*LREcXj&?e/s&p?
%G19tc=)tOH7aIBt*E/Lc.]ci'HfI@)]:rGL.e[qM]ifY,hF2^]"&0/1)*+P>Vl&ei].]22KRIaD2lH;emM:i!S\)u"kW=JkU5He_
%-J9>J?3%uh[/&W2Z8]^a&bks;X(Q?E4,$9igq)[2an]*kP$P7lE0]dLh&ZUVc*@HN/usVT41mY+G'EF"4^TUh:Y^2#S5jdn8<5F4
%;B^=3:HKXaE"e!TBtK;jA:X1-XA8#KN3o(#\.eo-a7.=HApiS&0Z;Bp2Uc(?;\IN,M;N%q-ERfr?FW-3kZm,F)nd94!p8Ub:2lbr
%rV*].!q#D8+J@RQ17a\c2P9Sd0A5n.>/9jYdhXG)P]J`U''^E;juMniDQP\?k1K@8/+YY\%-tJ[DqSRO/QLrT)LCG?\?%H(a7:IQ
%[YGFGXit!/C8L>BDRVB>a5U='#hkRpo8FWO99%W9Q$MHGON.R7>a]4>XkE%KTqolC]6l];]!\9=(qDhVC&3:aK@fAMkiK[tM`%oX
%rT;Z180>B*E4H[EdlCt5S&GYp.E#PH*8OE.J2[?/J.-!D]!aVE^KeD,4!r=ukGqT7i4'g[2?Zl/ST?*=@571`=!1XIS8G)Rl[$#2
%a6)g($LPZY"ki,sg\"ZnXfkU[C3J-Yk?D&Lp$m2hFc6>]X[e^$/dA]!H6f3"@WZ,2Q34GMS[\D/R-h_-"O6^9S7S=6,=1]JI!QD7
%12':*Tsge8[StgQ-lZ+j[<[o$lgH`iA-(C"Me$1E[nn>Cn&Det*Q1re+_N4WJ]jm?2H$827,=<40;'jBa"kB7Lt7jnEquDE12aN\
%4,=]1_l$mD4hlY>"1f\`YT=Il-'R:?%Ajj$g$?#I(?JshD<Y1Hj"T(5b-RY.m2"f#QKrWuPdb,g\Sb99.A$gln@qkcB:XM(H;U8N
%50[XA#8YjL;V3^P+53Fbb'<&X[BJI@phBE'I1d#)^8Y7Jk9Qjm`&!!Wr8@DuSkX!8r.OWU3tj]q;YaQCl=pjNi@kD73*]#>):5ml
%\i.ss;ConRWeIu[dR?+c<I0s/Xnm_G##X@Nj\s5b(E[DVkU]pe9\rP`-[5A-%;9e8kkS_;:HG]@:P6'ePL2m^LYk^(k^&ID5.q^n
%bY`+600>(O92+E?+"YS&Y"m)r0N9bPDb-m>GC'kn.[fZZPbOue\X0m5g"hj/oc(KIO>^t7REFrr^nhK@ILk7&rao5T\#e5#bh?Pq
%Q]^$375p?Yfi<\KQc#N`Xr:dUXN"-pHonfleQd9QD@l3i(Ai*#LLS$S@P_JOPq$)cX#=)M4bX-r<W9n=m&o;HG.5fP@kHO'4mQ3o
%(@EV6\F*Z]mBGG.E;8_X_%nQLBnaEPd5\Q2ni%<5hip5%k(/_pX+"lF1A+SsNO^S4&P-G;J.*boZ\!'g@FTGFm%P,$e<,HEbrHg;
%?[BG1_79a#`r*h^VS%i9;soO$:<]@1f]3N!k:`\cT'3I-/%=U#Wq50]4iH11om0Y_lg7f'!G8+moi=fA/UXsCmGc?P*#(G_0AUkr
%d.(_]AS27WFL.S+#d*f=cs:lK:BiJKC&.-'Xr6]f`9**=CN/THWjfjV)(iHA_!5U8]3G)s-AY_VlruPaZW^e0<KobEmC$$IB3!Kk
%A,SQ[9a^d!ZA;QIB#DJLX/\?n11_tiI9('0qZHh5(\X76ZV^>.V8>DH:ch<7B!QGcT2k7HdR^Q>fOqV<6X%ef(%td1opIa>[SYUh
%Q'0fTIbS`ZKmd!)H6U;`<ahWL2nHG"fOn47B0)m#NP[k04"cH,<X\f+B\G1j\9[\_5-$\Cc.Wp@qlJr,qP_q6KmelPQJ]Kj7U_pA
%f=B/C^=AUZG%'8P./Ys4D&;oJc*Z".qlE,gSNjPhfOk@q#?Q=l[BRsaJ8@BX>1dJqfs5knIcJ:/X/`mf&9m`_5-$Fse&KNg$N$p)
%qA/GBk(S4alnGs7gF;K1;c'oV_EP$#52.;,LocSG`)C#lJn%1ne)$s/9Df9dKkap-lPIGe\(+Q_onMIHD#4u4/"2u6NjWcpF*9S!
%Z"iMD^]mZdpp=P6@6\hlD7Gd^r(Jc'fWd$K[O,dP-<EfjE7LN#>",HmBMskLS@L'BGKVJ:ZPeeG`dq-QgLY1P-o6TO()tqZF/+Gn
%38!V[as50"rV_3r'[Kohrb"3'j47RErUN/XATR9KYM&=)ImbQqAkenu:S0:#&$=Xe\)EFokD3iA(>$(+r6J@UnpL*lO6i'l%ep"6
%WL(af?2h=.<oL0$m+=4M`1GfjpT-itZdLeD`Y[C1nMj7u\15R*If'KVQgeiu9f0S'FhRsR<'R3o?.6:DL5+efHD/n%Cn[_Ekt,Bq
%NaQS7U]&:GfB%".2uH\dWEn.'$Prs"c$a)(@4mj&<<osuDo_^T<d#EOW,=5n`[)6*8$-O\4).dMl;=UNgS7eB:/Y-uDHGf&6;7F!
%4"2#(m8qVV&TA%i4WA&CUG/?8QQh/ndc@:<^^?A#1:6/n^.t$HS#^tF0/+%iW,m4CCq*RA]HMlmS#tcJ3CEuU)WU*>3ap6K\bRHR
%9\d"G)^<pVn19Y;k;OL9L,SX?<QbGegJcl$/,Al3KeX+52;JY0._MmKO?SV>9.3ih!n3aAl]tci@NGb4oeCKFhdBc/lPfq0Xh`FI
%H(S==!qX"`>.?q?`QO'2$cTZ0@b&_4jHB`_8go^KQP[ZO>`Ti[qkp>6Cp*bACHX<*qr^GHD;j>9-W_<qrO7bQb^@cCn\rNBrj`AU
%2o#)_2/BX%s/eC9b7C!//C[/"\VG7fHiJ8Tgl!+T9R/5)pWrNqgX4]@Xji[d7mJ%\>kcd_c/$C&qHWUXi3I+Tk&/?t\)8H,-'B^m
%o.<r=^A_<$hOA\`g]CY:q.4]C$N\sJ[4d-+*hlgNXXscgs(sjgaNb:cKhL0(WlLC)mk'j6jpPkg0l4*9T/KGsC!$WLDuV+'K59D>
%OK(#i"_/mc[^;?8TeakuFAL2AD1MYnnPLr[Gs8d]Dn@HoC.q;ErW]VTW]YE.8@>5K^q?VaJ?'4SC3h1eECVXENOZ*eEof%<,%6\U
%Lsb9-95KMZO0NTg1!4,h<is!Y5(217:;ZQ(rB'Sjk\Vj!QGcL8GC1+%R;]<71\$Dh=lqNlnn]'OKe2&JYWm2eMbc:G%'qh12UH]#
%Gl>5.]&U9)biRJPFgq3&VP;%!fF"<UmO%$BP>h<CXqnZ3(!m1Ao$>;O?2hAg8S?3Dh0CUlC$0NikQO"#=rXMskb)i>:ru.oY,8fQ
%pKt!Oo)K4LPC%;Zs6h:3,mDFfR27u'?ea*5`kDN[8aj`nToF2)p4\=Oh-qaHMj5dKAT+ZS!ZLlL3jMr6N:k*Qo"VD"?o:uc9r<d*
%Pg"08n,MF>^+75^Ko!?)gD[WEr.DGZ#=M8'9MQW>Ln"05-%Vpt#E<5AEN2>F0ZM>=\I`b&G@uj,YTeL>m'')_=Ei9,nD[M.:UWro
%$<Jl,)m&S8iEf#1ef0R51t$_qN@H43hit.f`.A7spH,hNVk3<WZ+j=EJ`Q`/\Y!=j/%gQtWik:>>X#*&beQ4"Qd]!tcfoO`;#WeQ
%ag7rfNng4%F#)?#H/kb)j!L1'?P`>#Q6rI'_L\eRNnDu!=(.Z.V1Vu*H.u8%VTc0#]MnLEI)aFMo^,ad9_4ESmGO9t*SSAc1tOCA
%>BUWY4`fp]W^\<Q?2N,JI[.75b@iX<W7AJ!c$8tq^uRVb;dH,GIX0Idj)>DX/Q9$$%bIYj,,9j_n9To#:t4\=Y,Jqg$Z<F>SMI\L
%j*+`'nm)9S^m6IEh@&)j-A'(IDBYYG?J*+b-t2,;p:j<l'O?tLY*"iQ32Kg2`n,?14eh8R[A?_0JnBK:bZ-jOF;1RjN6J-2c/"9K
%W*LpC(,OiO,jce8lnX?$Zos\PCdkkEeBbq69D]6B=loEhVE*J5K>1c%30@$@racAAP@>W<G=iA-Ej^M-prpAi[E2-cn)dD#kVKlX
%Ei%ACVp:CA<GAb;^H"?;Cd5ns_Gqst>!)np6!^3^rEIj=m[1`9ARCe6d2X'?4H</X_HW4[LPXV"fEb[1"^sL4P$\H-95dF/M.oU9
%3H@>XAueU8\&pPQ(>;(io:ju1XIF?)'&D+`/fZ'BUJT3(Ge0Z!rkf5cdW0#&onZ]Qeh9TOc_4W-,'b#KNKQ]m!g:O9[5CSi:%Da4
%Kj("W[@=!e/fI]V[Ve[2@9OZ9&U,!?]kf^7a[Lhm,eZZ=U-25j[#0.d;l45:>UH@`ji\!T<k>)EmE5irU\WLo/$qu7D#^fXS`Q3f
%D<%og-'CIG%]aD!/!Mt<=1];gNQVY\drsK\XO-*cibGPuITbWig\X,m\?+&EIR%FD\5sWTY4#Xr/DJs'\?%C(onA1U.4Es-=04Bm
%nBa-SF)f_k7scg@4EO=A=e(%Hn%qGUCmo6'Zq3Tq.feAE=05N9nBbd5PhQ[lm(R5Bl@k#]"FB)9&"ScNOGU-"/j+5S:pu&c&*8Bu
%]-OUuD`58td!9Sg=cP?m4ES=)d%'E,qnb_`+k[ii?2_W-bGe\9q=ZZu4ENd77c`#V]C=2C[R8I`guuUBB?MZ@'5c^F6g*26F_.o<
%KnmtDYhcSMPqP8,3g->sG.<[1OV]'"6eQI!:SFfs&"TE8,-Zb/&"WH)a@##-?$PR<be%@^,eMW]LXu>Wl>;<RBPm\U%i5c1Ogc?G
%B;!hYN_qDkFB33>J!c2J\ecDkmdk+0Kb?jlIc7!l&T=Fc/$4<[TqRE]iO6XpKl;(8H/YGQ%oqe9isQA<fA&M)k\XRLke,<E9A5+:
%*j0T\iT;F&f!c[&;+b;GiM#j\Zbt2IeLit+G4Xh+ftrGucF4g_2^I"hnBfka6$i`=\a[skms<qp_R^O)3o>+jSuZaKiLr&l*N+5k
%2u`f;G2&_h+n?@$4EP)a<k\!APq*3db%@sf%i5R9%(@6lFTe1?Gc1q:j_]cgkVVT5&"T75HV%H3_F#^6k7rD6EB=sXDP\+mq1XSV
%CN2;Hn5+bsp/_"^/j*D/7$klHL[1;lCUY=Iq6Z,64ES=)OO2@D?$L%XdhLDAdB'HqiM#idWl5CrRMR%!($]d3RHD6Q.cGHZ4?("D
%E5gINh$X`&8o3Ip_i9[)Or#0#MoEs`/p"qR/j+7L)"e?[%50hc0%)&)oO\m\3o>*ojeo5'iLuHNUj+fP\F@kQB=$9FLW8"(hf`[;
%Z*NYKLX*>;B1Z7*lO+5oD2%7?Te4U3K"7h!%ReKP@dt:ll&/[1^=\>n^&X9-`nR2q$etKi^TiUCXOF]+X`=7$d%CAd"#<<"e[0K9
%$Ed0$l`fAZQ@.Y1&unXsqHj)@D`E&b).>&T^=oVCSP5Db`Z+]AgdK$bM*q",17!de_<L\sF>RnWQ)1u-3.9J0hY!Jbr8(-;2S*+B
%k7da#LJd3,2lp#>V!g#fp>]qRhhKMD<5-eoO/q^WW@!L(YN=Ys)Ekh0XF8uJqtHrNjntfLo(s>b>gWLLO8W;oWkm`AEUYtORiKq*
%8!=7kn(f!UUZ_`ds*a6`Y-]:&@dqg4qV<5mYSK28jsQAA7+E6$.p[IhlubO;gud$aOZH36`Oj/7<SABt;5NTZn&_AP)P50f;b,<3
%crCG_h5aM(VLAohPPEZ9RMIP/^nV5I6=VeL3o@iuo3/G!:<MAMP1S3*Q@CN!.`IUq8R&qP;nc]1./S@,c*'=Ue\:MHOUjTH&,@aE
%j4-TFC:Nh:k9#ib^u<+.F[(?1cQ6&$V=UICg=Zc[*a\D'X]uU<lEq0=.Yg52)o:NU[s/\^::b@7TM\/B/XW!mM/ctcaCY!`co5KG
%OcQ2HBs[ZoFDF9bi`&0i"Gt#._\F6!^CTSm/<CC">Uu6p0]b-u?(RrYn*dD7AcC^>.)o"WMrO_Q-hheu=2n`]ZLqTk?Jg!+-<5Ba
%U#176I-=sEoTdbJke_ZJ<Cl8`bp\PuBNSsBIRPa_e-e'lE[O7DS%iBBp\3&YM_KGt9^'Tsa.D/V7PJ(IeaFO;BShVd3'[BUR$Jf0
%T8=]i'5t(Gh#9W5)?W#%OAZAa`pP4<+2s!7jb!>V:Of4%/)CS/IR0,8U4scDK)k]iGL4bZi.K1jZ[99Y4c>C4^.pl"#8H\N]RTXW
%5.L1DZ-oJkDGt<Yim*'DmU(:$['aOT!`3U$TMSilYn4/j$5H8EkV?LRdD\aei1Y?i7B>Z<Ah^5Y1Dc+5%3-TZ>7iY<J<,c*8m+99
%8En.!El*D5]rn-olGjGQR,<>eo:ErTJT`'Xi6N2tH<KR=nEsR9R+b4$Tr/I!+%?H6ZsF&S=?d'J+7W`rIh(Y:c/`<mCNsr.9GY,[
%?)&n[<9`Y%gf[Z6o'4Z+Ld9rRB7bmAH398oP//:>kOBKG?7Mh5Uq?P-kJXEgK_c@nYdRYA0&pX'N'8JF^Yd[BjLa:0[*^f5btM*&
%5jK?3AdJ/]J1S1tUGrs@hju7-<B9ZgD_JK[W^g:^9M.EW@*2YI<rK/<@2R/bp22V+0K-i<k>P??(S\SZ9)\.Jf#VQVo2S@2jRbLS
%jWL/.HeAU0.*T`nmf=KSEWr8-bN<`u>Z@e-/YkETbj<^B:L8%^X?CgE@Ea)moC4+&m2Z'a71[\WU#5AtH2rG,fT%n4q,I%lIeP0[
%D[;6+K677uNZQ=]7p,n[6S86:asJ5]QD9XI!:pS"3+G+(Umb3Rb[[=qCBgck5jj!PLR/U11sdVSaoN@rqHao#&&/65^RTr_&L`F>
%.fmo*#RWkhj:ht!:d8e8.n6Y%9#T"'<@h!N8^/had1kbr2-5iHlfn!ePhAYTn3DAo<]_t%BKB*!U(7?3KOmjZC+#H7:Q?je>`<@f
%qM+pDI^[!Q/=I<8inS"4JJ:sL).Y0:7$E"T0<8,QD5i=;c&_P!Ha/t6&hn$,f4lRJOb6ICok8qJ5hJu*7"=\5`ckljdV^V9gNMA,
%DCE4r]Sr&2[RWU"8=nB<(h^%GL_7XNlFmiqVlO`KaM#/D'\CM\f,h<<kH\lHpro6IF#NTu"Hq@tN136QEs%Bl@@?0h=-Gj2J2n#^
%Fi=@4;doKX@QB8DLhP%1XUW3.<;T*XT#eKunjT,Vmo1;br]%oQq>lBc#-Sg?^t7;TIGM_^CL#!ZE<tXR.RTBfQr`#toSj.,'D'i'
%K0@1Llec%eS7#Glo%[dS(NMndq`j2OaR7A;G(#ImKZ(A]>.j/>Hd8U@bVWA1mO=bd@-0;_\uU;s"KhK*9[8[g'(4[hJDe>gKPft_
%O6_2_kFOd(.MF"7!u&1ON=#&7'@:EUbh%ioLM)b\VD"4Y;SP77XI7F/?Kk-k?i"m"&4Xe)_I`.FXMiZHepK/,+egW@-grHeOI7fE
%emDD,WQTpR0]9ie=MEs)SI]%EqJrMhiQ4A&9%AK_KTpcXC*ui<0^uo2AH66QY_DU$g5q-e(^%QcD9\>s5!%ki#W4#8K[H0'30;]j
%?f)4><Z[&R>DWVBRKXPcRu18(CBC.td]R"X+,3h^gj,#$%7.!t+0?$j!8r"4Z*L>e//=HYZ-^d:UoLQ=EZ!+tgm"\E;i7u5$mVuP
%^c9U;NXRVU<td/!&Qj0VHh5M589O!9k(KH4*6mDP=+sKnkV/t+A\Ch3X1rE/;^[BtMJqT\PGH_JQ@`S1&uTa">F#U%9:B)Ae0Q%_
%=XpG_Ut*6I"iVJo4aSV$,g@4HE5'H*`KF8oR!$cU".AU=';7sce(T<.gKR,M1O[dSG`No[CF"F2CJ5Z2[?OcdqK5)W_+66-n\))=
%W;q6CdR^RLp05GfdOA0QQtE/=9!%]tV?.Ydn`]<rW.2HQfntksHV0a'j4KjNK"Z@P8^uN;]ZT42d7HJJa2?T.##>/NPs@5#3^nO5
%H)1"nr^e>n*<g!c%0qj>0Fj+1b+H3M%\4g_N+fHbn5Mm<]X"FGj/a08E]uW7`M'E**JEWWItfb7l@X1LIm@U!$m@7p2LeN'%k88*
%q]br!RSj3b&,g$H%Df3m4q]_@]_V`giB9_BWM1_A9%Od",R!45\0.<-[/^QP>OMf#9(+)T-g"TB)?i,[@Eg%SB9#kRF=6`U7./Lc
%F!rfUU%#ISFLup[s-3*qFSklf`p"Zu!qg#!bJ20j_"d_YQB&V9aCm"%I[jmD[=^e:oY7;bWJ>mW)(`gP[9H':%&Z^@%,Vs)OO9%R
%)W=P^5\#mtFDmTVhB,Pge3/#@&`,Q43LB,_Y'JRAg'a\=(%o3lj.COAlHgV?6rkpI5!cLM(fBINaZlEFnl!Q<YE_P=n)#qDDtB<>
%SC(^OranOnNVSGT(blmnj#N)a5"G*DBp_B)6HS[Sk-q^<\pL(Fn3:WDQ=hsKpi5*bd2m8\6>://H,`Dl;\6.Rge$=W_94:X%*l?f
%e7D]#/%qCd8CHc:O;?,sOopNs`_=QY*QdiMoHU%cNb,sFVLKZci]lBlI2()8l=o^VP!%&Z6MQ`tYh5+OdI,I7+s5b/L(Zebho>(+
%(XB,m/\ijK\r_!(g(3i6*e,:5$Zo#1'+.!"OJYd).a]%U--(.(UX<=s_@dp4\W:'o_doD.:\D+k`EF)AW7_>Kk0(*G]^0Zd?)+eG
%cj#=j;#-PWdP.M&88`52Sq25g3^[2Q3I!U`?`BS\"HK6$4=^]/\-Tj+>`A>DDs)O_E]rZ9FbcR8c6((gImc)*1jqUTN/A9?\s*,b
%j[\_65T7p1#u<BVbFP3C@sP%:l:;uldjMC2ID1=@.8!d&[G*/n7X*m(o:KKk=5LPPC$%XZHA]e@@6<R`b9n^=MYnT]@SM1I=3mU"
%o\G46+.j-`E1X#%'PlPEVCi`;@(*[\Cc9SYq.G0GS.'l]8&?KDF\Fkif[cop>+*b4l9'J<:/g\'nhF#^4`_-fam1a:^G:`Ahs_=5
%mMf4qgV$I08:e5og)kl#r&f6l&+9ZEs7+4s$TE:;9_'o1*EQ\-L[SQ!\"E5GLGuEn?ooPV1OEM9>BX%HgP4CsOLhZjWbU8+OLhZj
%A?(,b6gDOG+uF'S;REc0\nA6N,<&A*$0&WH75%Wd_Kp2(3k-=dR;+#lmoUU$4Fus&]qnQRN.rDpo]MDH(Y6hb,0us45N5af@-VBL
%2??O45$"o=Y9PM8/GmK9]Dj\]bnmRirV0^S.Wm=11M]8S9L8V8C'>-pX:Oln,*qEj8KsM35<SqdI1$kOb["iU-uX$8?NT[eTOiK'
%Id1[N!ilX\#<Bo.8r2-=P5"WQ[h3lfX72SPbJ,oY+66-JIB*O>NU/H*7N0"$N<T;URGZRs9]!%;^F%dKO.cGD)J1U^$iIl1AIHDm
%bFPT$<DA5#WBr(ApZd'3S8'FCA'/JVW'0-VL[ec<XOL70PAo)48D,,^A(EW48U^/i'e%HZ;EJH.aFAMKTlKdsXZ7H,Hq=.l[-$#*
%X!7'%=`\E%%Edg?Z0'c;dQ5s,\QHp:.X;S-4htt/Et/"7Bl]7^2Cb.RM7gI2N#L_4dg+>KOh==Jooh'rh1>r&0XlO8d$+9a:TUn"
%4gEi!e7hM1',q*K)e+>0\m$^,3:En24]O9VN384$*JGeAhKVJ1=Elt=Z\QRS1pAt^6:VeXl367Y)(al:6uIIC2HXcE<B4a:%,B`%
%>()$U4>_7MD"OMF"&5g*0=8FbB!];c*4e^E3p1HK_dscM::jg&:0]6Hn0(#uBmb.Oq(R</f(`YLY^Om;DASscg@,_%DR1CM.1[-+
%@O<4K<Y2;Rl,V8YS.GC.TA*X9+ot@++mQ`![</n$mk\gQmO6tW\(X-UKAh$d"fh_Zm9luKTe!r5!XMs]$[HXFXpjDYYgnTWrA=0[
%UC@D?Z!H7m+`K6!kU&^=L;6T%.U)K,S$=-OMfnHpa@#M'O>_`r"_A>Sft_PW(*Qh`<2S?c0G%ZIZ"/2dhNUgnpjDp@M<='1&]R;7
%K`L=WKp]:i%,(kDo`ZOT!Ab-RKu*6BlYO.:]#Ycc70@j#FBM)`FOu<!0Bc0ZSAl:dUOW?(,E2,HiZ=)@P.'6$O1LViqboLPC=@_F
%$4,"[2\9RI,%O8$e%mYDG%L+&'#K,l`$?(-%0.6O![<T1>@oR_eVPt!BkC;k@Nni^Z"Tr(AqY0anmEbUdU7`jAgk.JBd*UKL/d=i
%4dAeVi],/,5$SD6bt#^]I6Ln%@m2*NmIT:?G0kJ%I,!i%O[*+j&`;Mo31@o=`jAYjCZt/(<ge-2Zu)0^DcW9LWjJF<bF;M/SLRT.
%o5AGGR<GT,54.7[X>90BaWdtfbpq1;Q&Oj48oNt)/\*(d?V58$\LlLkr(H:VTU+>1FP846<Q?KmG=L&@_QZCF6:(2D1tADTI#P\U
%)Hl=*401:=O['+aO8KLls.KBIZ'\#mdJkXk$oM)$`qnE\frR:5o(:=&ISU-$/<+=T1<XmrZgMMZSG_D=i3oQ,b5GK"POPO>1mE3E
%4[(!LC;<Kh_2l(B)MmUsc6&8uK75r][?No\;5V]2'$(OeNUQ#*di-%5QNT5GB%[C$pNN]0^?^s/^`:af7t4j_NsGph@tDjX?Y%S6
%J3'<^EgaQf2sQHS+_Wi24nQJBj67ZXf/`d&")WO5BZbD\H$Q/ISK2s"]CUdhj!,O2MsuCr,&rX"HNqJj-5)4C]Vg?bfa&gY/8F8j
%'[&8APnbJocSO]a0#FhINbB/03l6dVI[uL<@Z2Y'QoI?>=\fO@X0fn"G_Cu2S.&50N()A9c$M8]EM,$]ZS7"].9]A>VE+o2=)Y/W
%)VGD>;/s-D)0HoAo)`iJj<L`s)*&96N,`039T<L,`c@%.FcMJY1aSM-R>AXt-C>d3MkWp"\JQHHRpj0Y3S$SG-PD6bf4,MV`7(SQ
%"q\&HnTB*!$\F5\)"='UbV4;b8Mn>D'8Y/iGn=8M0u;pZ63Ya>P@k2bZplY\(FV(5Qk%D8-Q`R]X;Rl@;?X`O)?i/ga*?21]"g`/
%36dp23C"9;c&i"T_6Bds&d/b]atuTiRL[UG1JSO<eCW^hO;'XiN3e$_AqCn]&L;(M![*Ag@DW?ac#ehBK]^O$MD-%NeC4c)K;.D'
%f3p]W_)+Y+]HVBn3>.%%aN)OZ72WX.k!b.S8CACo!g3&b8ATCES7$*m@I.ti9S"<XCD6d]D1Y?S6Q'kW9U_+:N8\oJN<l1F9T:bl
%`1(3+&Q)r[0]R[S1r3^13p;rFljOnkZR2(V))N?g'24-*&8A>ce!QPqTOV]-1W'n5P12rt[OfCekQLi5`&SK):mIOf2n^5i!!24O
%+Tf0u+CR0APK9MO0gaY@nfha>L,Z)-O^hh`-BT*1;fXVH$r\8[Bs3/l'$]bG:!(g_bkQLC-:lQ'=[9omfGT=p?pleE*lcKokQFUO
%$&hH?@NlpMM`bZFL1a47GpX`@-8dH.VW9/^";<U<c'Uqk(LZUB)5]qI;I:5J3]Jo[5uVeYZcEM.*NVh\_YaBX_$h!!Q!iaP&;RNK
%-CCGT)-S`9;OdqZAq#?/j=&CY'/V!]n>:JloAJ*EAsdQT]3p@"e%macR%PmN7-a(^kc2.\T:dWYat3.W.4N*/5"3h_!bYi.TICbu
%,kEk&J1u5nm#ck%`;Yt"'mq[N`):9&.>`$PE!=$H$YBZag$LQ'K#.YQ0Z0_QB>k$1>YphL2B;im$qi7hjadlG"h:57"I#;WXWh-d
%c$TN)ampe#JlWYk0oQD?B[.G@R,NY^A/KIj/uUF#>_"=;fG6S`B`1?u2n8J].(,F-aW;ZT#o^G/i88"0CQ/C91?gcRI7Wk(32-Rj
%5RNf^)ni1-E\_]Y:`Rp]EK?,VBgAj&#V\P4+(WJ2Q2m\h&D4?ZN@5O'7eadhg3Dsf]*N9cQpeijeM_8$BO/Ym?nB^BJ]Wcg`f-6;
%EccCgaNL8G;("_H+\#2u;T>J!dT^g@HCINl$:q#J4?.W1JU8T*'AsHQ^e0`c!q[FD!GGhpVF7-n8J#QR$3_`%WrT.a`\C)5K]3]?
%,mH&BKVLBCOXZ>?190=k1kLJh:4]?&$:mC%Ebn.=AZdtBMoinKpe%$5Z=7KFku(q'`%R-68#ussoH9$S:p_OAjb+HQ-A7.f6Z3*%
%$!)UcE;Tk?&5T`jZ491,V):T0`QHh5:uEWRE>3q<(tBE"+q,U>`//BQj?RfRJC7UlN-_6gQjQG5hE48==ePIJ&fd_9^eIa^%O!F%
%2ki%G=YSXP11L8LDZSplN>Qg%8gCj$/3%-#.$u=cR2$1)g7XCp6fqS@"]/>-OEEfl"+a3adtpu]k_,F[B<a/M@)fE'6!bBZ9g&AX
%,E)kT(**,8D4lJL'[$b+n<lSbL-_s`as2_I#TX^kH4(?iA>I!BlA\>ROd4rM;UF;))_$;=9u,@a'IjYJ[7qmT68jEO-@iu&n0g1]
%hP1?R@uP&0*XM@&8b"Q[OS/Z^=rVRC#S?SN@!X&Z(lP.J@2AYUC-[]:(SM!VDNU"E/H@>^@L@nsogZkV7aY@B@iUFJ)\Y1?]\]:o
%JUj_Z1:>bJj6&afPK*f$UIUq<4DpJV/C#TIdWpX-.8c=b91.p%VOE9Z'mY=5)m!&DRcn9E"C;f%'[Zu"/IU%^7dk&N+C&p5:c]l_
%WmGDl1jhn'H4LuPNf+jfEH6T-6df0EKR0CcQOZWaI:7f7`,"aL%.l%Tr#nP4[:qup_#kF):l]5JAJlgbNZn^Z'=ECL4G9mmYZ*YE
%[=oS[d7kL@#"WYTd-6N><>m-BnqHVUj,VS:7n5$+i3CsjW&XocWn%jhDik[m$=A'(X*P/XT>jp!BS/n9nTu`*Qq),;49RF9"i$u1
%CIC+cH!nHZ86QCP:M\FXdNGNBRg)BA)*EA9(VhYGbV?>^C)\'$c%17MVBSZ"[.(B/;+@ZE_@/.cbbINlZcH%eYVA>L72`PL)1!H!
%:NId,XbB0A2/74^O>P*S_m@eUi#&dWb/aWDd/1+Df,>g"U?%OA9&AO*cHldP!f,?gdY:YA32Am?.HFA>%4FG6bN_l?6j&C+ZJVfD
%Jq=%_TCZaC;2C/GZUTSuP#I5!3PD[a1kHgeC(Us'MCNm"U^oF2L4gnL5$>j[5cY0Z+GsSUCmq_3Un0<9&4#kG$FJh-0BWoRI_s6;
%OO@@kYcMK>G:%]G)EFaJaSS-Jg2)B7>C>+?VVRgSDF_#[l>5=:^sgBHhAXOUi)")pBS>R]jXj=.=$R7Z(_\)59#JSW@Y@3KVmRYp
%!q2?U"&3mt=kQU!60Ts.7f9"3LqH77UI.@;7R4eML/;_QmqHn.h)*h#8.-YYDj?;CI*aE!A:=t-A.`*fG"j'SAY]*J`<p5=?_SES
%3HjWr1fGe[N]\kP]AWTP#SAF26#A@#]%0RpPQj`u;)"0>Ng%N)kL;bj*&@cP6-#q3OOHsH;i'$k/W=\]o8^3:emPI\'ul8C;Gk^Z
%nN:t=oL@4"T]NC7E8V:H0p]:a"D<^\'?(q`=0Wr^f1<P,UAYIgZ"]/j4J6A8gTh:a*ch6[-cikrIp3ke<?$_Q9ic-7H%7;KDsO/V
%n<IJtdE'/b6^SS*=_I5uj(&O>QF@7p2MTa[E^V.69XCfj#>`D%<2N-<g<_1G<>uB7T]1")D]$63UBkljRWrT'8A)+MP#Wa\LP_uU
%WNY&5$??,3P%<$4]WMan\e/MRQ!FclOd9&p#I+gk(;-+RVk=j9Q9^?Nl7F\i0sKn%J$1`H]Rr@5IL`J=!cG6b&F!oeM&(dP"ANa_
%Q<D2R.*;i/%6dK`5U>'5f'(JMO<CMJl`E]/Q'(<j`:?r*/1u0;,JTP(O+I$mEHl[A]Ke<FJY<ZmX?_ja!s[-m8tmFu$;Ft<Qmdb=
%CfFV(c64Zja8l%W=uS//0b-2n)CW9f_2)IJ)So,a?qopZ"I*1*B`b'`JmQq4e%9>4X.U6Jkc!lMjWc/gTTg(K/CYWhEPk2b=R<aM
%]Ko2P`o=.B&6r->m\i+uMi3CmTEEU]o[2l>b*[<2.UP#K,kj-a2"'UMX5$nrhKHF70!Kk(XWm=i76)e.irlaLbN!G.]KqQ]=;E2.
%(f!iP`D?_$g<L?$[K);HIgd<<Oc$Dgf9YD^;a[2cC*19i)0r\="q_<ukS.`.p<q?8&.>cX/T8LHaB+$;8D`o'40UQ^"!e/c5kbY,
%$c7j0KQrHLPr;I@0gHs=4DScLNY;.+L%fk;\Ih8qLs8'#"4.)M(5c6k$^bILO[V*H183&#o?-(;eJK>M;X-q\hF-JAM:UoZk>+'<
%ArJVfe4>L239lTVOgN373b-[-_!`F56*a<3c<S@#].%9"3(@5#W.dT1,1M3?)5%dCNgLGi-_70NW5a?sT&O_lNGRe;e8JEoe7F]L
%hf+m0?tb5?&@5$[+D?s7"Re\+1MR#kfX+DR_U@E,/IFO:Y9=W%MoBsIYDM9=Y3oLtDFq/"joYL:4)(o(.P`4.3OCt\0H@;%#(%\S
%X(keaeM8Gm7fV>MepbPt4J-MlRbQ11'RY,Ta`qCXNr<(,a'(@a;7f%[U0J'jo9!6UD\N&taL,OV2JD\?).H6KJgN%@9;DG)O]UD^
%#52"SVA%h2fV3UtETqj9^3"_K[WHG/qlWTd%K6<f<r^o8&D#G=,nRG@6,ulURjOE5_,gUA1d`GbpsTJV50*fE:9h6<5/!9O1YdD8
%Wdn'%Fm-4k%)u5K6M^uG/bD#@h1t\fKBO;0VlIR3ZGc=A<$.Ob=Sd3?)f5";VM'3F1./jg#fs=1f/onZEe>24>a4)EmW&g(*Y#r<
%l]b[iEK<=g].hd^OoqCBa)"`3NfX*TK'F:uI&Vc.<4$/p#4<@gFeH.C7\kq!l'OGT%!;m.h3?=#G)q@t'Al%'3I+7-K`2st;0b5e
%o!\pSi\E%e`5L(_fCS/-<3Bk:h-?ME2'm7.dFL<Vd_YT]T@gI9;E;7Y[BInc`b0(*l5d;+"/<\@CBgpP.j:/PMIZMt%#ia*Y-BW)
%$S,NpJ*VE\.>Fc_.#rFuI$JX/L(f6<g<p?'((B.NF01]U1]2(VQHB*c9fZZ'nm$5i96>;8"V/A9,P5XTHaJ@kT@nV)V8i_Ro;T1B
%Z)adDr>bH4?V?BjmQ7MoP'47aHn8Z.7ngW.M),]Ue:#13A5-nd9IPEPmG4#1N;"/*cj."/jtj:XI%0/gs63"ec@)=_g\SNJ'HO*@
%Jak"lV[oj7mF+k?-.1>%pMd]\A=mao*N.Wrm<#\cpZ_B0K6XsZR9pO55>J\a>GjOB)6q2D+X-S?ZB9+[Cs^HQDp"+mmkLDO#R<$5
%1AhR;X`h[\2A1>kTFK,7g4On#;%GY,irS<Fp1(rej[[E^_L]$Z4-mN.5InGIGej-*rF\;CDe^Mj`spb<]W"'hk8Z]Hiu/?.FHpp.
%hr"acY`HSqV/#:BD'QV<Ytkh9^&'iEgYpktIfhS3"4.YhZrG>3a0=UIHQ.GW[^B\abuPoJ*%#Cb3Gaj)'mg!\^c0\2_LC74D+efi
%\$#HBGBe[o2K&$$n6Xo.)[RO&d)KWKq9\#2W;G?>\A*I%^.!EA^5Y#`G2!4<;gMBVEP9E&^MUX\=#M@CBd9=h%GJ=n,p3!<%/92h
%Qa"<lZKCA^!3`IsjJX[59+2?MesH6N<T1&cC03)?7:`B+S\[D.k3*E_H6(q.QW.Dnh6a'NP0iNrD"+@*PB\<_m:^ap6)=Q9/Ee4D
%65SjHhL7_3(eQ2#B]FL]R*M_LhaDTc-f3I1g(@gO!)9Ri.?>qO$J:kae<W"t6'0W0qpKO$dNVu<$015bA)<u>!'u#R>m@T3XQ<Qi
%!\3b1/*PJ#-^aQ=&02,4;_X1+mEL,Zmp17u;XiiIX7Y8?g=!=D6Wmoe8@&;!0!18uH#Kq)JHnq0/:4Do!D*pG!IN)-or;qLWHM3r
%@N\:QHSbj9VH^]Yqc?@Vrh1W*@YYo0EEPpuoX>]e;f2E>X6@e=E]\#"(=5?S)5Mt_4,!i+8m+*ej9F4&J;:k..dKJ(G@^G]86E[s
%.p\RiOs?Yf#CTk.Oq7M.L>R+Sl]S>ZctTk2i-PBXS-)g.6+dfS[MKsG]cT.GgW!I'S[J>&ql^JTf&[s%[Og@&e_qi,3>+F/TT.-a
%g1,WXn5$B@E<k4)*V5Qd(VPs8*s/Cq``oa>[JL@/cY'q@Ah12lg.:GS5p)FP[E&9:iHJSCDcg>\[].g*r:1s/j-TfA5L)'4SP[05
%AAUgX<>'jA]$@cf1pq"laOL=mZm1<E$2"V(<YNDTjBXCO@RD63+>IWEdFWpn=#?iO7+XQC>ssQ'\9\NdHJQ4@eRTuT)l1;YRc,36
%8Jkjb*e+QYqjljTSO?"=UTSl2_oV)D?46?i/K&W)oFZY__aS@a<fbU2?":5F'\S4;j42,EkB8&uSkkEk<.H8=F".e]Y?dft%G#Pm
%K9-9MFIqP9ZTYPZ8ia_qN@E!dfQMLh+uu=0Th#kmcN]\IZrE.mfYlJCG^b%g(OR;@_KN0bGkP@Vmg"ZNccpGl?WLP.>H:IBs(;FD
%Fk**,2JmoO8j;BA?O8Bf4;pc02J<6Z%jUc<I"$pCEPJnB58b5]-Z<;P/Go*fIXR_2NU]E!17TFZ#ku=rSuok`q0^ri`dW5<=!Zlp
%1`d+]0X#5:JB4UuhO\YdYPs9"@2b[G+Nc\dXVPGehp8j!r)mAtX.T@<l8f;bH`elZK@/R[SbSqN-oaopo5u:_IQlAkhNB,QGeT("
%r]lhGhV.",<?r+<8#o9JV/&1tD$fIkrJAtjIC'>Or``Gs9U9fF5+`p[T`.3=5lCO>3td@Q-\uSi\$t2P;+o59qg'u252K?/X/l)5
%'fj4sq-F78VRNa:X;=h(8#si4SSdKoM"gK6[R^A)Y9h<1o.*q;oY0bm!7PSURKuO:2meCOFZ+c37!lAR"BheO[l'kr>`Voo-Kj+/
%<Z?G0\NI\PK^ZtQ9p4$K-qqnOftdN].jU>6jg!\^ps!A6>@#;,)V0-iJ:-AKCip&ip0?48L?+#YBYI/G#S#i?.I/@;N8jbO'c)(a
%DeP>bs4P2LV"GC+n)]#@f7oG:msQ?g26KHM2]/sad44,er@.@%<4\]/*7V!b/j*;@M*6pt!)Wil4l99hP.CQWf8D'gU"9Va*?SW>
%SW*.ho9Mik\a'b?9`BfpD5c=^f%#qZ=0?JDC'rYs*>mA6!@/@DjD+j1Y[,SY!5VFXZOX?=0fu#Z/;"U(8kF;''e'JA4je_0Rek[>
%>rbV,\6_gWHeH)]f%6(\jA)6T%*=qt5c":jO(r2K+$EG>Y+B,lG%#^2/D*q`H#0T9=@+GI'^k5]BE1%9:H]9r8e]V(o6Fl)bdV^t
%Ou2ieP-KK0=]aq&]I@cI#uW+m4O>W.jfni^#r7#/"I1>(GeRB[aal'1p,KP?G^Srd^68"K\)B!6^%"?<np';l!>sGD!XURdadIf%
%lni]WE/?L,,=tWk6B+4QOr"(S;&P!r90?6CI+)*IFrX3h"-G*m]`*mW%'KEtLK.H,&^!u^iN($m6eCl;j@o"(+EijE)u;GUX%;_:
%\T[k*i#Km9XLS=bIKO<egs,XOhWHCqJdSunLq^A1YU$#tQD(Ja[:-e0(-Y5U$bmGDC<=8?G$+VqgWRsdbk<P^/4+[e,-"9NR^4`&
%I`';]*<@Hfdd][ELYRZs\IHN,2sLM;k4UXgjsqt.n#^WJTF)5-!C%N?N?ugXI>PdeMc+C?m,cZM<L>2q!GlGK"ANn\"*u2'&fgZ%
%S@MZe^BT*+@uNU=KN+iD1d:M[;u0W=!=FI9W/c25AlJS;ANi6Oo5Gm>;5-Cn3]SW<LT@-^7,-Yc!"i;CVWh7[po!&!r:cp"VK,=-
%4O;rX<NDY6SQE%$a9H2Cr;$ncru$o&$9R1`h&ql>me+hO;df8cUY7jLU>]ch/`C>MdFQs5!MM`uCfK8OO8NjH?Y/5)IHF_YM)VQf
%[N>aT'HXg@`C@^02JC#$VL1kiA"<<L!m/LV?S)F-_lDHCD'X555p)H%["nXNU!3GHeO=9p2$BrqrobR5fqcfq*AlfSjR>eZ:.l8H
%/.hrej8QN"It!2r,p75eZXiY2n<Q2!h)_j2;-e/P_N9g<>Q\!L>7r]HB03+7Q92Ig&KSlHW-e[#J6rO0Zgu[qhJ[1QSD[\O$HJa>
%X?A6qpkka3Rob"8;_U?5g\Ba^O,jh/\)[?%r<GN6rt=4"aCel>B-6Kp2uTihhke6&!;T%.r:Vp4qX_HF*^:I:T8MFMK_',WOGSnn
%M.Cjt*o@_grlr4$X%tqUGL>n44oTtnnSp_2eRq59P@Mjk%a.YML=NN0pS?H'IpD+@+M?9ETL;9lo82<goFcW\7R`V$f8"Pj^a3PL
%5Ob1nW&.mN7iY_WA$CE;2ND&5Rl*EH%$#^S]U*47)>]5S4&HQ[;"r@7(<^/])"0CK2E^\CW:[$23tGG*]R/>To%@IWGls)MV1gjc
%Unsgj#"m]""GR<M-B\]>aVKs^>Q$&nEtFofe9]dWN?;cEkEk"m!dG2$0MlmFr!N$FTcjY-GE1@LFuqJGF(2F$%:o<NQLE[cl(CfU
%V&O<:$4TNngghB\7YsEc[!#Bhm"K<=*?#K%*.B2tfaTqQ\oZ("jmDiYT@9!,ZSW["a]o4p9R^hLY8[,+J^Wu!7ab@Dkd];Bn]EKs
%"eAT#R5_V3UNjA`>=IW#/pV.#G>meiKZ4E\3]1jecJ.&OGYBtI!PD`DRnKgqg<cpslmSctns$_Ll>GHTo-,k#e\IodKU7!"/]];F
%)J&Hk$:juKo_/l3ao?MUk3*kP[1iiFSE1O*YJ8Z*h1,%n^LPsb^\Xuq=NUHk1?0eFrN,)YoliY!prhRoq"9u'rS9\cr?J=fbObMP
%g\>iml922p51cMb#9'<63Me@.K/cQ_`@?^<^PnC>E#^Z)J;o++Ed4m\SEl5:W`3]";O.R@5'6JUqdq:QJnh&SqlUR;Cb2QLW.YW`
%I;rp]pq(\2,.q,FGVsHg@n(Jr-l8XK"<#mVkoL?.HQ@[[fa_DR&p>Z_EBu6I_*F<gA4enI!(T6HU,`E.)q5L"7!5`[oc^#F[5T0=
%*<dB\&2Wh8@h,efAQt3tqu0LM?JWX\.ocFDPWG-1KBo]cq(sCsdmF<]k\)OCM%"3"]0Sk+:`;>KUpj#o3e1%m@5!/V!)F_';RDQ0
%g)AcX2c!T+elsq686L_Zn7hq],a8A#ghFiO-4^NfS0YWT/4TntJS%$R<7\,17HGf/IAmd0jti`9lea+1QI"Da%M8V!3&UtVB6LC7
%%^.Mn6R(!ITl51Bmq^#::m/:p;P9!Eq&fncVuf3kRFq.6+\QCE/OGrl..q_76^jSr?VVfg\DhS=HJo%/P*=DIq`"S%[*Rq)/ha>B
%L55le.)R<i<"$"3T.g251o4Qm]=q;FjB&hPoQaE38"i3O^mT2]8qDV;V]C+uXfs*l2MeA9WKQ=`M:;f%QLYG+;Pm)PPkrmES,k0E
%Ohf_,.?&]:UG)\-_3Du5F\oi#g=6\-3+bLjou\c!q!nlFMq=t?3nWEF[Sk$_>f*4.S]Q1K30\qENBc)/%e1:rp.#^M?!Q"Z2Ma'4
%KeSNE*rm>"LBMr0qJ]dBoNB!UA&Tpi3RUlpa:hWl^Z;V69tp6@Sjc5KH1h,6!g7r]2J@%)Fb%%@G5J^VhY5`r5l?5:as9"Z18^@/
%UWc)*!XBl3l/kJ'>_\so&@M#WS#`32je4-Qlc%C$]15<(.Kp[=o'eFuQ9nN1`#]rkJU(0Xpu`X3YGCCd8&TeV+\i`;D"(jUJBa<S
%+6l>4N&G>_hbDe`llO%_U<X_1d,AVnq:GC&2A1@Ycj/]-q;@ldr6B)6fJrG0TMp!g320KhF;._m<pHV:m@;dr["KuV81G1H$3W_2
%?@!0X-0pF2e,WHE-N*tZ0#hJ-W]Ur')oGIHCX;U>OY-.f;,3kF?qsma&BJEH1=J<GPBW?W9(iSd#TZtiTIN+;HP`^V@:P<!QY>^t
%l3rsuX:HZLi>]qLLBTMnV9(W5r:PQT/k$IIXT+kHZ_!R66P^)JS7-_5_g^Q+dhs>19/CGY3o!hMe=?3>\j9M-D/!5&>8'3q?t\Fc
%_4XU>&to)Xd&]:"X'+Y@TSftP*8]uE?,E9dZN'pp^[L=%=]820W'd`k)=HYnhA8%+`:eK.%BfH!!<Rq?\K`1oELl2s*5j:^Es*hF
%K,rRn^_LP-DnlRn`Y:gKh_--lCrhkfhDu4J;a(IW5(oHAiB!or"jY7VT=D?P&/iI-B5@5;o2j8RMsTA#6"t42.bd#jRY9Lc'YqAq
%e+F`34c(rCb@KYr#NB9*4OT<%Tafif#+^;uM&EKq084%9WXJ)SPJ6Nd#6\DuBO9hZ+LhiA!\_fn[g\K0P6(nmqB2cr&l)(GB*]DU
%mcug+"RVi;?89WlJl.&jm2dDUl8],tpA%`5UOuNF,a'aCXI9.#f:q\td(O1:V_6`PqNJYg9BiFK#mFigD=a(%*,I*jNu&$.4;,o)
%=g>nF!eSKSM?jqf(eAR45(oPd$S39E"frD87Y*k/ZmC#'Oe8Y_dJ21_@/,-9c5[qO$0nH0%%A%VF!SZ:D<GhQJ:CfU#Fe.#EnS[_
%!P=gtZ]9b>'XXcFT="B1amj"@fMZMg"DLt?3Yb3o;@l/]-%3Rn\^7Je8Pks"4,O2o_R_r$jM6P43gl4BR"i[S_-(1WB"7)FZs<!R
%]`*dZ([Bh30RO"V&X]@L3]*DL`_^e/BcK(L0hP4ErA^bNKt>Gjj)-Vl>j\0B?@YWmb*iCB&jP,6Q7BP]@i3Q7oocfbY+5U4J'S`C
%cJ:?pJ*?&kKYt#_1Q^R1>?V.'nh3;H]=.i^YKnc)[10S!mo9^&?*?%Weh9CO*SqRe)ZWe-4Wr5_q%3Ptg@0B?Y6a]^-b1UbUi'D8
%#i6Sn,?sm%QQXVRD"Au<_/PLbAb-Q"2+MqD3Z/1?VS;7*IGa.9$A#Kq0n6]f<]>"0b%Qo!5kYT]'XYnfT=+LpJP:W9!CT'*M)%u3
%<\-nJRq^V6o!-$_Bgs&F<>H&!JE<af5,BC9NF`ORTQ9Bh@/qtdeJd=qNo39LfE0p=hlqeUi'sNJMW<:hQl2im[i`f&fS6X_3rb.K
%ZGA*;'d"oRR8QdHBB0?s/i%Ri?L!GW]mkB,(N;>$J.CN_XKmiY-*:5U(nZs95&5MjQKI4k\+o?]-R"`?qGj.]A*T+Io[1S`%Pr!*
%M0"<NJM=^gLePJfLk\mF4P8SRW+]iOaum2/]15<(MH;:DV@5\YWqGbV*/Qg>kQCFRI.5HBIbVs@[0uf4:\\##[EGC3nOhdHThje5
%!+H%Q]cf4_=;ND%OtsN"&/RL4,/do%^fMsD]QDBP0lT4@m_,:1h+4^BZGje^^ha0BVZO/'j&r0_["6TSRpN8-_.=%*=maJO+%ZXi
%#8%u952,5Np,Qt;j^+TQY)e!<Z9Q/CK1Hd,ETf,J=a<OF1'>,;DB.a>Nln8m5Q:M\c0p#!'SL/8j@1O*R0>fF%&k*m-Ab&,E5FkP
%d]J/_=ETrYnl=+GQ`s-AB1r.WW4nbTLj&Pn;M5cY;S$?sKn'Tk0Y9hB^.K0G$uGsf`bm@k-i!'>r7BOuXV0"O2u.Lpj%H/L$A[62
%@,)%VD1:AdN^*TS'M'^kf(rNIr.Mef(t/<LL=6COMpCgC+kMh1rOtl>TRom;T\U5?S;CYqmEP]C_b4[jItbLcO^PV%g.:GS5p)FP
%j[281pRP[dg4r4@Ak`G54Fpm>:pt%L6*GC(b(Y+cQWL`9CgjuG$':7SZqdtZ/eW7]UZ)__""SNoNg(/!X=Jm=`c];/h;=!`3"iT<
%]`_gN#d*YgTJhfL7Y##o7=d#M!P_bB+RXaT.[cQsZ?$Gc9`AC"jTE@^r9$+g?[6Bn/IW8TCO_?]DX=sD<'p(i_DU[8_N?73p<QFf
%GY9"&m\3NEVX0;GE4:K.h8"0e*?#QE;YZZ>gff#!n,)P#5E4XKL3V_IL[KP/T,H38N%&pL>&buDmcb2%c(k9=-K5WTQ*biT0L<Vh
%:(Z2!GR;sEZg/0inX"KC>QBm+31auq/qpZ.Y_`bZHlNqCN+\X$rYWu%P8(Yj5hp3rogbLu7nS'6M6I%0aQMU9M#@Y:T?Ni_na"lj
%"lf+5nYMPV?J5_Z+#<7u4s!4'C4<<5gao9b+,A<Q5!]m;992!)P`=jPZ@lG2]OE/K^3,,"p8L40>\YPfk(2b3PfM7/%]&_"#<4O<
%HlQ9Rq73"d@%R1C4O3l;-^_h@E'A_b3a2`LC;%p4o5QH0b7gp)0_cJ3$9B?^kQF0Z]q:?m;W[9GO_?q]a3#PRR-"Lgg&$03321bJ
%2OW*53$(k2k(q%]OD4ErS1fL4q)IG2&CJDK+-.5K8*0qm@DnauVp@D-T148\-gMA?p1P*SBu]0PA<d8^j9Ko;:Z?aaIkl4ITYXV0
%a5\2sUAF'ZPoFIb[(37^d&0VIjluWJ8at&(I=MY"F6D]H<@mNo%4U%R4:SK'lAm8h$Ni8=cGpM9*Y0en@@m()n<qIp8R/lO4er>*
%H`V*+Mht%Km;YCqBF(.1#H0q]oC5IGg`Kq_79P[qJXFnj8+74SqSk@aXJ))g1t2B<OCHt99p/f[!)^"T24NUcW9nW+i7t!&;Oida
%ai?D-jEC7mGWa+0KdXCK'I$,hj/?hDT'NY7j;d:/-L0^*Fd+c]eHTbB9<aaaHI,e'-$"F[P/bTOUEP7TR+Os45NqLe)hTB5G$`BY
%,HnSuKFY*KPn=L,i$50LL:r2-@[JYgI=4*N:fI5ek"6QODV/>%Bq`,064il1j*HU=quE,l)r([,aG21.[9`le-\QUD0EhOdY%I#n
%emiNlEbklCj!pI=%`44N["DE_TmD;%j6`=jk+aUQY*i_UfA=09N]h-B_"Ulnh>S9G9qX/&K[GI?J9-.<?_@PbNI8,h>jqmnc^6kX
%@T+4;Fs#neTH&+.!nJ"ETf)J?^fRd'A5rOQ)n<BKSDO"jke28'+_H/(hPF)I4\irnYIJfa*,B1OnjW(l%'e[KdX_g#<jFZk//Vg_
%G^#1d`="p%a]MKfl2CG36[qed7:F1>r`eqK-=5c*J$sHU^]!8l^\dc'?"?U?Yc%"M>PNCh?2VkfOa$=[J,E;,(*F8Ao4<AB.:87l
%p9UKp0Eni@j0j#rme;DZiI]#0$O*\j5ftd3\m>(]nD07H-j"_`6AB_)ku8$B;U\6!6(&<M,c8W0<4N;/6cY!%#Dc,>_a+cuI[Vrr
%#aJuB'9_LD#!V,*IEfh],BRKM[*(=`XGR2h+JG2oW(G&O!M]>.leLoeS+Dr3+r,BFDRlEb,1$Ni/,Ha[8nS-5+qiCm=ZG5!8NidY
%;/UKqT^l4dC%17qDE%4?>:p\l'8<Lf'e$/:P4Y6]oS-UTMn?$/G03EM%?>"MC5%L%k/>\YM3P_XHthkV-X^UH?YPlS"?UOe_C]E5
%,oDa5As#S>EY<&!$#6DQ93!-m)FD!%o%*7n"J$#$X!00`Ka^Q:!O?=("O^Kbd#1kK814g&8JG@N^kJ4QM&1j$Z7rkg;"U3<XFX]f
%2f,09H/2bg*"D^]5TBV':a;=flh\N=V7u&;AO>0.D"1hMR@==9b++Z0S.h52';^FP-$3j5!`e4HA4_7nA@)fQ8G;jG$`a#HG.kU0
%]Fuh8(`sUQ15#A&G!*B1&^Fo,UUe5%?RTfWSQ+'9Qgo2Y!cUXMD'20H+8$canPW;T52)9dJ>b-EGUDHm!)!!f4]?L&\)e\YIZtJ@
%`Xg7SQ(;)="db_8I*HG"lAUi?c"1HD/^]H_'C8ij^Q]"\IP)16&`?c;D+E2n9;5H&OGjO$\BtcFL$a"f=j?Xim3M\tet=UZGhuIk
%P[,f>T.W*g?j?4:9&m:#*YqGOXKp-4@bFC"97P$h(N0&c<Hh>CMCiF3*TD"R=h,-*79)VR_X+k!cb_;lQ>D)B5isFk+!FNpONkth
%DnARHNgHTK9&F%3!?!'f:n<`Cb.*oK_I)XT,LVC<kL;+=$.p5frKKo&4baY!fHSKmBEI_T^e0'YXN]>?O:`YFIW8B#g*`s*$':!4
%$76A=e?>3<k3k'_n0N>Vk_I2i(D?se;?Qf".`c7Ni<1a2?br2Nl4MPNERb_V<C6uA^ho!.El-K]q`p&GRk?-nf1F%!'-\Q`0=WeF
%*b.X*p6;E$ojShX.NF<"WF`WgR71'g^4:s<F@'eQ^"#I.%`VsVo*r[@.X1HhkmORh<,8V&2(11PjAW;Z-Pr]F.?&'c0\qRh,RYc_
%cB#9-0UlVDC:-WZ4J:+NnlO/]ZE'q61M+[c'^J4IE+O17771cu%OpG3Nt5RrBYV`R)$`6F199%4o-)]LKq#'%EMJ>"DfLY&X/Q8)
%$REXk@`FV7(uu([AZb^2[-S!R6)01dn.Kj9XXc+2:*EHZg<_.@W'tjd!Lh,ZqeS"?M'$pKDF+A$C%&'gghC#7d]&G[MsA0mgOA:S
%.oT^aHT-G1).(n![Q"1Y5i/?2+35"grp'J#iS<Iso'sDA8-rht#`hapG,^^Ep947&23b.6J5g3*i+T/@!ToXI-1QY)l1#pOcJ>E\
%M4Ai?G4Y't36G\2d[-mf.jm[UQYbXS+U+Q0GmZm2;C0VB-IDk=@$l&4EOOAO3P%digdO:CD8e*+5P/.?64%$tr?^ZD\X<0<''`e,
%@+%EZbi`%&&_^rn/P_U/N[G?63cOd9ob+%J?4OiMP9,B6U`8+U4=dIG?[\ej14BLGA9-kd+o7A%gpp=Gij>g=b2$SGW"u;Qk*U%0
%*8UDKbVUE!I`pH:Pj4/V!`0o!W>"oY%&"YthN;crH1,cH//u:,p][#:bsREb:qhjdfV\2C`J3%[<K5or!]6@E4%60KU(dBU%S[<Z
%0-K%")5&O<V!;e^;Jne8qiG-\&u+]D0,``3OfgP#b.h83&/C\'AJRm5@UX4W6.mC!(DR0R='n;:i>$soCGXrtJ98?#rNZYW'cD+(
%J4tLN\hp'Xq!q,;k29@Pd5?!A#L/B2f/IaR"([Whe9u^DE,E!<gaKrii0RKSFPD?UY,uYMdEZtC3c95SL^o7G4,c-V>>R!p*]KYG
%[Vpu!&IfmK9+aj)[^j=6XjO5u8$f/QAqI"K:.5A(2&*Jd1&g%[I"P^&)R>l[rj"+?1l0>Q0-1:/-)*[bp![L'j>F7p:/N:[Y"V_T
%i35q,/os[Fg053pLgFP^D?C`S9[RZf?!/Ui:SShBnJG"BQeL+dm)$9#EOfq.SW0=Xcg,DC4F1K5g#-CY;2=*N^qtl3W#%`IZej">
%PT0._%.Z/lIg<P'-sY2#b$ro^^#J<hOp.:)]$RQUW?o31[-qi;0+8S_EBf"LAp2=A<Y!)'bLb(<OV`uJAoEm/NX=N(pJ"KnAf.[/
%,W,1<.?,=US_j0O)cjCe;QX;=bWlP5<ZU+"One?B'"]rI5"kq06h*rhl!LDi?UEFU9A+pKNh>]-XV01%A8;*l',o=FL2*liV*Gi)
%a*5X8jr352$5*I*MNBOgXNh;I!h.@YP)=kZ6>:Uj;ikXUg[N&fq%CX&<TN9iPs?fCEFFGT'Hp'tXa,m-l&E2KY3QTYef^Ba>9*&\
%YK+W6a_.:eFk3VV=Hjc87K&L*5H0Ek*Z\;hDZ(nR":MnR43:(4U;:f:Xp+Wq7i(CW+GW^-amS2+fm#::Qh3)p)N'5l*54NeqlPp#
%&+!d@:q;7JcQf"$2,KV)i8#>PTIsHbcY7QAQXUbJfV;a%>W^C>lU!so7+l2G6*'*6Q1n#SX6RY]DrLJ+K/Q%a9:?)c[!;11*?Rg:
%l8;#(V1QPnD$gjN\?]kIXt9*u`Ul/hX=ffYklta615RV8=rJn?6\V>IlK[.n`fu?de,1hOU2^qH98GqQV@S0VDZG+EliOF7oN!q)
%'$0W23PC*0AD43MZ0_@n19KkRi@DE_r>e'Yf8;3a_'`6,;k>XIM3fOaD(F<VMcNJlVN1fu]s2PBg<c?[ZWMccWeT8rMT2mU'"E1)
%J9Y2)eUY^;cr7d*MbD/jgBP2jleiBp6u8-(]l1nGfT"QA(P6JVm\LfRq!q?i)aQ!R(2].!Z>E?B]^J*k,&V^H),O]$-)d2F5Wtt+
%b#W_8BXJ\^qH/o)AG&3uH$J9p6)?Y];\H%B5I!4Oi-8A8&SbnOSornk-K-:&-=be@>J!;nX@?mB1'Y>Q1Se%o)bjd._p7CE'Sn9f
%_;b_[`cre(,'Dr%;)S9j@E?L"_"7e0l\+ppghG]A3W'9*aP@ZkZR!+gT7!&3NjY5;g:42dq)VR*QgFnFeR^u10(BbJ&s-p'H"4?>
%;OfBk>DDmpS58n-p]`]?3lbiPmuMB<HB.L2hDuYa$ZRM!3Z#>Sd(N2gTBV7h#F4b+o6BAoMcl^XMn^cXf?73p?ed<s?X35r`K,(%
%g\aE>L;97kIIRkIo\Io]9<j"nNSDRQdc3\XL2mrdaVjar/k+"f"*?-o:h@V-4IGMgFRaPL.t])]f-X.oS'Y,VSYfPdCIPZ4r1pIO
%-A+U0Fbct)C\?hIo@;t!9@.82B0-))pjb$lDH2`(/FI]Xg1_2U_suN%8$X46ap)9?'DX)@Wp,ci$=+eGD>1F[NV(nnX4r\4Fg:6a
%5<*Ps[=Bc6.\fB#@aa#K/r+Y#q!@sPf*;+`W&;(s'"*H7"Gl=HUBNG(.Y0-uYuuE]"`o_e\5MoAC`J:0\,u;c."t9\WMKkGkWu*L
%oI4*^^7upMGb+@?;pr$AFhF(s`rTJQ:e]sY&Y,L5@Z9XMBr4:MPg+`?k^9iREsn*Tdn.m4Sa!<r\qB^[C+d4*#-GZe&S7@(_=$6I
%C!C:tbVX.23jkW:UHNbeRCXH6DaCRn0O7b>I5E3-0U?pnPu&a(>_@K?9mfK*;r`LBG\C@WQF29td]5471lSS\%#+S=9:E\</sk9]
%\lsa<Q,&(D.*N0dRK9:V?bJs&NKI<!cBIT=L_-:<]2&O<'$X/JdQ9pHZeCD?]#:FY7Es2B/Z()X#d[4NORtG?5DcVZFtHgdD^@?%
%QI?fKZ_0r&G"%;rJ;#WQ>:o3hMg55Jb%c[7@1.27h(80FoOJ.4DX+R)BulQQ;Xi85@t:["H>-b--nhCsHIq:lpeAXdZZtnGpZnU#
%!nF/Ek7pU>QKFNM6p3=MPZ^?'[=ZC[lA/Ks&Es%hcN$Hj"9k"sQ:?tD`qBK[[u_3eG;YrPmUAEPW%"U-gq5t9B[pX%TS4^G?f9SO
%/`La-q.="Hjob$'DH6PJHT$)edROGO`)9*F.BU(Abg,1%11^Or9elSOlDRGccD]>7-n\l*U_FV\ZXJV5F8r]9fP_L`:tp5#"4?OF
%SRd(m>UiF/=?3D[E`CWn7n_EJY9"ODlQ(d.gIWe&f<sF8])T4`VCel(GNt?,\66SMfd3ecCY%qc`)dsAWO`.s<38GGMA7.Tfc[rY
%o+mRU9WHU:Q&[M&Ba#c)S)[d["X^WVQIkm-A`SD$1o5EglMOVRW-fH9fh91klcW+DRF!l-F5+!9j=k]VX]BJ0U5%1KkqjL*6"sWZ
%?9+(Q-!OeSCb%%6-1*_e.TXFRYFI946_6/4*aUJGC,>UD!&WHSIFGtSRCt^@(smX'@k1m,"MJUrh5Ucdq?Fk*^3\H$V1W!VN_Haj
%pW)hJ&]&a*HUDBgJW"QXn-LR*e8K!W.\J;)qkB!8FjBsICG/rC;b6DU-=olBYa8fcb%)%N05<WR3Mi["&uUge?ni!A,&*?"O>=f]
%6M!R'bp(oX"K\&bV-b^/F4)6=cp)8C@GFaZ_fQ[cgd2#B1t)`Y?FsWgO7Qa%.d("q7"EF\M!*#_-$b!49f>h).cM"<;ct:P39WU.
%]+DDb/KBshHM<QoR*<f]/T-':MXo8@K00I]"9oumXb+bhRi`"];n5?nkd6\bU2KLkqMm@id)mo%e2Q*Hk*EW_L$B0VjMk*i*n_BM
%+>.`hNE_Y`@Fa#<3r+]h&YqdW>N1J4k5D6rG+hk\D0;m:\dYPhqb"S-R#`8R)sYGa$(I42U0BbgT7TMrZte.1GcQGn/%[UnWL5&H
%p5QK$8/0R.fhbYF$b4p[m4[W8aQ9q[(W`mto\g**aWFe(#D"7*#It7Mjn%:amp>XQ97QNYZ/%kZ/.`Bb[HQe(e4oB0Y*Wb+]r]Kl
%Yi*L*$oA\4<m*\oiMVEVS(&Dt'kOG&MqcTE!sH`Acom&>DbS(X5lle@(502EF\#HG)\ck-WN9&*JEsg*<'u'O6b_YUkb<`\n-CN^
%LJ1<7T3X@r[%h9us&IFH'g'U%n>Q[g^NVYM)^cK7Np<Oj`S=HmmL/-<OQjXb;YV'=WsIeV.Q[$[Mad!bVXr554.mm7NH.$h\oOI@
%8F@Z=W%ViNX%P,Rd%ka<a/Jr1't7U8/=n]HA*uTTIOl/JRI7;RVSs6RO.\#n9:#;QTa.,\UcM+8;T$JuYGpqKrZNbc)ToKK<,km6
%'i.V:a5GP9,U.hV##QaP0"(k%]1nP'fKF%Nm:W3.Xl]Cmg[+V?!#;eMpfa?6;QDj-H(1DGDc4,=9c,=4+KJ@,Z\g<\Dd6!BE<hjj
%GWe=G0a?pgY$=r7W3<8%/:aA`RXIgZe^[YWNe._=m$94)n[OI\+=r(eq<V+cl?M_O<)ed97OtGPPLE6rT*X$RJZcAa[JTM^pnM)s
%d\6?,0U)$EG+r5hhZ^JVlG7'*=Y7=?o19bMP_smR&X8--;\*OlFr&d<M.ZE:d<DZ?9ij>uTt,/0PN3dTbo+P6b[R9Tg<'?aWNlBt
%[r-9A.FGe,[](0U%!SGPX6"()GN?JQI+&r#.$Kd_R(1:XkKU>CW%MKepP<^A4!3qb<lo<I:A"%P)^>i)'AOns<_W3-h^=l(1'C-e
%B>Kk\oFmH5Wq>8G80VG]V)2/AOJ&=)Hf_\GW(`7IOk^GR[@o\g,IaF&\LcIVm2-[g,FdJKJM;*0+Le\sX3<J`gPO(cN30q-Y<m@f
%:'[Fh\Tn;Q"4&_/D3N^/Raua"(qCYsVB>LS[rY\)j0ff8SLlbb&&rL"[e$R-Okl%<-+nce@(-4Qhe6Q0"6K2-Rr$R;`hpC'8rdFX
%;tOql%N[LIMpg?7(rck?]fdo^TXWs:9S>Xom:]@KQqhQicb(.7g$R%/0*f*0.!#k/FurN3U_uf4:gsRFWDlFaer:P,=88J8)NER5
%KQ3ia)S7"dD`l#A]:J\j$C*NRgKA3ed;2a)4"i0#DPaVm)gTUo$1GlOB1WVZ!J.fd</:QEDJ,XRi;sn-*K]^_^lW&Y_X3e8+7&e&
%L"'hlG!J^gOfPt%mF$d:W&M1+M=5JOZZFkuSE/fI<).>o-#0o2ZJ"Un<)gKV(,s?s$1_.te4>/cX\Qq#m<lQ'V,>ZL$:kJ,J_lD&
%GtHaVDb&+O/PHqR\)RN%#*>A2NXU;^E3n;]K&:)Z2Q)bH-=t4%EdLIIBNK49&Wm2cDC6\I5u);f8jD!a#J$B/[tX`jjE@Ero*R0!
%[fa4!&QX;lTWI\;njoHk;"K?A*U)lYji]?(4.s1pBCFh!V;=a\bbhkEDLaM"!kfW9G^>A9G#f:>[FWW@7s+jPCa-D1jTX_:j@EEk
%Y[LJ^h\s$GBXt`QQ:Ys!P\O4@1<Jp^9u(UpYhL+K-H!pU`bn;g!ce5Y\XaO4QD4"ean&"_juY"hhoP19q5FJR,k3mCgk"7@8s.p8
%o0R=bD4ZYl""1QR87d\Q88^ouK[b$-?\/W;^rbuR3CnX4jS#R>qjuklgiV!AK9ST=WHiKHgCZ@YQ,(N/1E0iSamB@B-=Q]TE]\%=
%;b0;s4(>3G=`OYem0Jt(97mdr4%b(]`nbfYq\XM97rg[@lR:M:PM8sdB=+[;B3UYnR]N$%dKWOiJNV#+gl>8B]lolfp%f0k\ioom
%&LO<k-i\u6RNp<\r7]e2(-up%SIF@og;@!nW2`Q]DF_MK`*g>rEdQnR-B]UXamH#Cd7'E?\"+fj`oYX)2>=\'jd"R1BMP7BDf.X5
%QHhRUI!YB5DJhP9;H-@(;JnRR;NNlue92Na@sP50gQ"<0CH5nEdS%qk^(984"&^Gl\F"h//1DPbg>X](VO1B6=mdqs,Dt^HmmahS
%XG2jm*`(k*=6@B_),<YCe%1bd436eSl]`2VE]Y>V,Z@FJm6Gnf`0lo\i[^(\^hm^=7%%IWIm^nkjhYkQ43DX"Kmj6d[\IXYQ.sQ#
%8%jq`UnGT/F/Y"%gH]VZ9f8nED9(-'L5aap@*J.7+`'U4Y(U%I<.B#o9em>Y@&Y0hSW78VMQK-\kG:#C<7;\0mg-foOkYn:,#pDg
%!k5kol(cqeG5PB92l!gV6!Z(9[\Hc(X-!;5(t);YZ:%RCA@/:OF)7!J':A/P2%MGrgFLV.@]DUbs$;%VX?XWM6dbg/0?nYtAiifq
%^'8&Ye@_#.<[G1a"^&uu'AHZ8V'oX*o6)9c,j3;`I%cB*$?AoE#'As?;X(OaJci7uK2Ho&$9e]cWAH'/*OT0THL;oaUUZ4.EGo;J
%lbH'bXV'<u2T$MkPiuAf;Un=odi5#]V9!I#>,F?5B.-*AP75raFN";$af4YEOC[;eZQ0-dU(mlEHUKg!SPS-1%=UlhmrF7SEb9Y<
%bGM]]bu7!`7Vr[B$*8Zj*.cfrlXg`1;VNoG<HF/R*aV4,[YIp"W9nu?6I.Q)4#_\;jI7m_4!ek#M=SMjkI1!"]r1jkjS#hP2S4D+
%jZm_HShC`M<cU::$q[udEr5if!k1=?Cn'03hkUlk8705X>D=k:34&R77g]Y=/^[dn/(9Yd1D^lc>@[kOq\DJKfe.lV)4:`RG"OP'
%^m*LnKO/&p#6>^0m35,[n_M#q&p\ga.B2Tl8g9WIHYEfV<3neN7'>D[:ieDA(A374*Y+5rD3m&5)o8K?k^"gT%Fk*"A4:7FT5KeE
%/uN)45$FFrOd0`^B=@7roq7m.<"A6=;/:L$j<h2..34iDqj`_kG3T04.!*OIVp6u2+LZ4E+u7o^*YOn.<*74`Eb;ps2*s<&B)>VY
%,-u]u8dE8\eZ-E$Vtq_#<hm+pBte5X[Vp"8;VS\C(V/q-+nBelj0hmI/9dbqDgaE>gUD&=$(\6=7VY$Xh($)H]+Duh@ct23mMr4n
%>Ku$Sp8s;n[2m=.G6udmXkQ?\qmHS:p8m!WOkRO/Mp(F<RK_^#p2-csCAYGS,.4!(O"u*JgJ/u-p):L/DG;/,G.5*o]!>OS#Ig8d
%SC-_XgJ4O4.ZrKRf&=G^G>%Mb[e"spR3T23KN;OW)RnNSfRqrH`pUYSGJj46[_m^B.7J,9^<gI3DrJ.:4aqA)h0)#mm4e*0ZH'Mk
%E!7qtCNJ7dB+VW@gV".g^0M>5gJ4@EI5fGgVdlLJ)S#1h!tr03gKP<4mG_.a3KW"7q9j"#[r3oo,e%]Q:>@Ghr/'3PJ<GoXgie",
%MX;L+gUG?TEne'I.WX;.`_o"2qQ.Zhea-5Ge?^H-Yt/ci*jk]jDJr`i\'lq\KYakYp*RGi&_QL*bI?0lgD_!_mG^$ge-ootMf2J2
%`NT`29fn:"G5#&B=\-kNT.qRHkg[a-:2ZtroGT<CgUB7%P2!J323Q_57iT#+ilG\OMfIL\a#@tl[rXMM4kl)=g$S8gM\"RqmGaJX
%G@7mu#BjXeDeF9)[fb/p/%_@DF6_#qDVm)?aDTm!qoEYFK3+0LXKE"UOO0`aY_)pQ`F-(2DO+j8ZueIr0Q)46%R!4+q[QOmH9:.)
%,%QYh/l<.jD2mBn_BXWg*WdsFhVNK9+T2D>dIC,QdSnNi63nqeL_B!H]@uK9&eHg14KP.d3"#$G&7c.7G)8ZpDdD&`N*/_4+_/!:
%fN)ChLM0gu[f]q$7h=<u]A:)33dZ[t"m$f#d2Z?M[kjO%-E?Uj6elVOgI$cNnCnOJ'Onc'gY&/tW%`OELeJ#!HW[IGDeE0OXeSU/
%&&H[ZDjRE&&4G&NA*gT2*EhXo+\3R9m3/,Aq!F%^Of9$u'&7%M\s],B@`ktm"2R-RUphfM8V$cI$19eI]$u]F"F$RY5W=!N:WR(B
%^Wn?,ECa.g`Q<#<af>?h^htMLCp-Pk,aaI_8k^K[jb3bmOm(W.=lnu?'^s2E,RoP3Ot`VmgArTpp>=qSrietf\4pj2K5.RnE]_Vt
%FYSj1%O`]7IZiIroqN%qVCT3JBMS7g-(#=q/FlM)"fcI!^fr*7!J!m^B*1JH0QK7K<%[,2KNUKB%VDgQ8`N[;KF>#mU3'Ta[f]X6
%\Wbe2["+XpJ*/YD5iB'Q9ZGuW*p^qu[]rblGq7OO?Q)WVW%^@YV0SdXqR#,ur>DR/nKYMk_OL'A0\`:+enRVZaDAn^os5QB?(()m
%a1eVO`i7`QIq3g,YoW!AXmAbukP:<aH%jq3o1)+]J_?&F,J(Q.-gLi9`jn:[iWSS'VYOc=:Uk%(?]$/QHOsLF0#Z,mC:s8n`(2q7
%mC84[3SW@+K=o[<f?HWu\qc6r4s>^SFU>/joh57#40>&R9ulk5<qER9>G)mYi7KY^No%h->/Kuq?NGu.KS.c<X4@j9S%=9$/t@*P
%7eWWVg2T&SYD/KS"LH%p.\+qI].h`?B9[R)V,mJRMa1I?/l:7&VI\@67VTol>,!3[g=]2ML`E-U]8N2&<e`)I?BEOUX%4k.9gWTM
%%dHs>3:4dhT>kts:-3onDABt4BqMC,V9N_Pk@GKoMk"t_ges7(+#61GY58uAQp_H/UE+%BMC6DW#F`:/A$f`2&kXuM40M?m_Oj`[
%(W*4GdQqRpWi)[Lg1Q]o8NI^U1rHHBW_hECB$[0X3T7>d+^/F8l*Qf-0YX'94eO"%,.hceG/A)?+FYdi6fbW7V.JZq$E&;<>*[#d
%m1\"!W@iP\Zib/DM3:VLA4>O]Zps5cF)s2"^C-q[UQk5u3UQ<$FDK8am4<Wm!<]66!j0JK2b#1(DmEh5f7)g<XAU=O:Ut<r*Lq<*
%7Umol<(QD,UqWC`g1bCAIEu'`oFj,/nN!Xul?+?9i3gnc$55G'*Pu>*X&jQ5&33?Z%(pbo]"oREahQtHm5\*h(B;MYrtj8?AUI^[
%[0+ZR3V5XRT@G,l:2>X>kI(H(:2=5#I5uq.\6)dp7&74XXq0Pd$`tEQ-UdoP>!#J#mFOqs'?0g=g"lRHe9]FgYoBY,Ee+?'<54\`
%C?N-?/I8<rQE'F,SCGiJPm\Hhm/ZCY4?2^fgP^)-S^K^6R3,1<LSeGnHXX;AeohL""\(TBEmN(B%&'%Nk04=>r`Gn';2n+[#<KHD
%gri0PQ>);$BMrndpHiRa4c^K<[VC#$*(NWuFKS63Zqm8fM@-2N+c1*K&!ZdaC5*`YC?i?lTo<kuX_iBYc>HF\1+T^$nOlmJN6'im
%/[=pZ'%uM&SC9I`8n81LBO?Wjp(K;54&HHH69AV6qO3Yi:@k/kP?Z</:d$cD1SXV'jdnTl/K%)J,Wj/8rD]3O5l7*/g.JK+`fJQ9
%Q,ueUY4a!WeOZ^n\BuYnM(7n<'A7qoqojo`[(IZaY!hulCN'J%4%H6<KV)WLWI>lbW"[Z1T\6RuhHYs[)j)/sk9Pt]7!9(=Y'U#/
%aA,*(R&kk[reXMMqL_1Z>Y2!mGTa:*Pml)+AFEW4XVds(G$NbKY,;%'M<qn$p-&Q9+*_t(S&imqPJ'p.g"As)&p!VH`6iBJ44%33
%:54!Wd:R)jN%Ygd;nkV40$g[L,=WS:^UK[/b%/QVDQ,1!FEU>&=%s8^2ES]I2"A@n7t^CKIYP.hd'M<c2E#p.8ejJ@lp,^5J^"[(
%k@P]n:,d!L'ab7Q=ZPqtHI-3.;aZ;@1d.k.bmnDX`TP$KkL(()ZP]1&b:%INA$_rrV&q47Kl$Isp<O9R/?mfYMD$flfmt'p?O8W]
%ls>]B=ZA[toM2hikC1'QX`csXhQ^+.=OfZKk7@/M-IT/t^b@N*DBZ`JIq!6f:,@;^C:/7hVtZre44':p2COtjJ2A4bpeu]"dl@uA
%GhqnTA$'o>b!@mC3sM(Tri"A-+/W3_[G'$SQ0qJLSJN\IQF='O4(94.8ia-/J`\KI%umXpoL^R`C<,_b6QEm2B9s!oY=G^<4KCo;
%NR&*5$'3R1m!r][+19h1'Ct`QT=q.=`E%rDNdIA:co4"t>\ftH*,P=tX^g4fi0kT"@$VeL5\:8$hl`*p!Nj7k_cANSH;PD7OP)_e
%l&5*gNQdDeOa($6OkKW^XRLqKffQKjF3uV!c/+l:.l>3`7^uc)l.V`Vfn$/9?0U]@We^_OZh$[b;:FdrCIQiS\oM5=cAp(XN#f*D
%p3o$@cKOVCW@bT^9VA^Z;3M-K87uRhC'C0Q%T(*PZe5A9LV_[1<#Vf8O,_CJS)q"H2EP/.o;&_1+HWT_:1p3<l;0u74+^.hFV+B8
%\AP^[O(.KA)'B<7Fr6n$lYVj3%WhPG>.E&7ERE(&+2us'<;_Zng&W)[h>$>HR%#Alfa$f14a>qqaD4EA8)U]U<In_/G!JVknJ\%5
%NGA0+i3VGV1!P(TI!/gJ-<1_Dcb@,9s./`6!RWEInCcPek*(hc^?f$i^h3nPMLk<N>G%2cBmb(hQdjauI.i:mc'#g`q!:8J;S;SR
%>@69#Xg(tiTINB_!h[0"2Q*)@EMrF1Kqa9,V.dS4/Coin;bOI@#?'r.1MY,+;61d>O_Gu$c"H3fWPoJb,c$+Z=dA`aI!3&#eS]+U
%5!,oISTR&P[0'De>i;sKp+TL<N6dLl=A-&D)"Q@"rG!57;67GgR.*u]h$EDdUbIW;g&W?DD*eUbWs*2<i]q1tIBL59pIsqimI-4a
%*!kp@oJb#';F3GtGo^Ai(o+c%XA9.s)Vrn;+Q%iqTNW,^#jo8I<f0opTcFU!GCL<BkHiu:\9e>hr5Pd"MRBqIrT+<Y*Oj3IP.(bb
%\6HDNQGV%jDMj1V!hULk/85o9a0TL\)PJ1uXR/ld*U",]O(.L(>iI7gj/j(9:a!.*[bE^!r(\G)X4b^',IHM->@'".0\UOHD%S'U
%0\V)\fu.@eGeDTh(2Ihn\^XDT$g9H<$9B&rS[G;e\]JEqGL5jS-tk^0;6:jk8Qo\3.IF6NPfF'sD:^*BKQa#T,T-_OHRm*XF%/5D
%r70mA7QWY5Mkta+AUG7_ZD')`8DV7V5Dl^OG>'jTZblh]J^TRPPhAdgk8!_B5Z^=XG2+gR(EruS4"_E=WCKU6%3j.rA$L268=/E"
%[%gip?-(V$H6'Iqn]kW!f0'!J2=mbi"\q/Ud#(>EduM8Ca=tU97]f*\PgeKn8U>XrCBp:cb.B\$GZmHV`b@pbAolC\_bfn@C96j6
%2+nhqN-:jNC^pi?W;1Imd#NQ-+Z1+1*FgpUQ8706aYOqn.5KU%\f'm_HruLj-FKTZW>B0*p+Ve,BIDH7G+B6!_difV@'<$BZuaX#
%Kj!Za_U>HYCP;EN%K`=e]WXS6kBj=0/,@:9bI=[FFJ27l>nZr!r(*#OE$q9Kd"lf;^$@SG4m_/nBBT"62&qS#cB$tJBV!T)_q,Rs
%m,:UlI!.CrQ\m2b?,##4CUJrD4*"Y(A8p1r6B3M4Y3'^2bn_.IclOH/@'ij/8WA"*Zr<Lf^2(+]W>?E=5sbcF48Y=oS2&_dg`";*
%dJ+iN,@RQ\gK*@UPM&p!(?+*I-PuE+clPrB5\QK/7L#W@Fub@nXOXI$<]UQSqfIaTFu]c-ER5WMoNTcLSC,&HeUqao'>:hVFVT[P
%.P9.bhoBhL[-rW21>;P.#1]9lc9@KVVNc8U/g@'=.jC,':5u*1=KA!-9saEXA@-:R-SjDbY&r"t?*=ToG1"'.+LL`KiL_'_I;<nd
%d-ccujKhcNS9G<fG#9K\XLAhr\%W^dm9;N/,YhEN,GAE8h)k,Z[o2R?p8pDH6Mo??2kbZ#j$m^[c7VZh7VL]%I3c1<6f9*2]$V&q
%mG#3+6MiZ,SC"uEPt5TGAkaPXe,E3JY7fQ'-']1&[;U+9'&'hZF\n=Y9T+RIZ0/4L3=5(^p"_bBg:)>E$16K3N.cAZ3HGL[G$:cF
%gk!hd:"W!Mhq%3]$[9cR'&%%d2^.B8Tq-B#AQ3CWg:'?h$16JlO+_[[q6e.MmG\MX]E/`"\'s7X[(ChH*4bkh%RN6T$g>=XKQ__Y
%;@D4cmHt':#jpb,3V_s:"W.n[q!;t6oGNRpD_KAOB6TE^Z!#lZEtI'i-G!ZkFukgVO2]h^fBFEb]7]Ak[*t4MQ1'FR:4Lm.,GErk
%@L&O]?"id"h!VVlB89hh#\qXtVt]UO-5b[@hep0QBA`-maCc=(i>&E$MfWmVC@0a`)>WXR@i8gN3&a90DaHP!TQS7hmIZWDX7]4S
%qf\r.6Mkr@7RB38[%mI0JCk+>\bV99g:,fq0\Y>K*)@W",tC-\4jH'q^h4IuZtFBpjglJbOjCb4h3$#YYBWc_o@`@hT:T\M8T,\t
%jKid.IH7^:]r0u9=bBU6d.N,6#)ETjirsj7DB31hN%)t9BA]tL88$h"MF_BHJ;1!48nZb[a-Y%_&)iYdAe+p/^h*hONYg1,f\gjD
%3qrXai<88(Z(AMt,&`<KeX@\Q4bSgsSNVXo!hEWV;7$[hcH`AR&:]\b*hlkic5si6J^+a)MoVkJ%Rb_lVQbjN>L;^SW%5hHmU3@W
%5cC#".@WK=rAL-.KEq[LSZtRc*2BjH5p95ISNVWQ"._TVf;>luAt0,mGLP54Zo$._-*19RYgjS<Q)bpbc5r^eJ^1t3\q/,O^i-OF
%BIK*MMJAK40h<2!aFVPVU=.eTr?TJ`$=ri:k/XS)F!n:iP.A!YXOGi-P_p'R[0&2TL[j%@&sWP2q!:X'l:k6?cjmE$BRFuT?>.sc
%lpJJ(.Iu/;Leg`K(IJ!A]fT81#Gbng88)WOTbS5a69?5i,#TPjUN7l=iIlB1q0'enm==h\]gugDW8*k`&DD\Mk'/#U"4`_[#jk$\
%&kjl.JBiiGi.Q:OY"j%?OO1^:`[NaA88')WksRj"^romK7VKgC0)fK.[("utWJp]^FfZtNW>hV'H<^%\llPQI(Z61u(hi<iIQ=F/
%JssIrkfcGKn.hnJ7(ir?1"q38j,V[DWF$!@b;elc7.l;kc"V+'<0D^#7cPgFFia]a]hpq.qTY2Q%VQNs$^L*g"o(!RSRAa&JA'Qm
%d0H9,n65r=g8qm\JL7EmmU(l"a;_0#ODS-3[6n*S7!E.K'2;NYI4rVm530e"hZeV;g&Yp,18D5Z])7g4Xds.u!r`+=Sbd_MKGuIo
%rnK>5cL8dX_d2qPS6KtRbY$CB`-.eW6"o`T*&]pImBD^0)(\V=M5G!*aM+_9f/@M]44'PWT\jK>DQQdjq('R&gXLCuP!a<s$2cVC
%j[la%JVWU^dVOKfhKE$MA%'9=XEMnmM=!Q+\#V-@fhPMT6"%,7Xo2,!*N7BWPhAgTFP&/fA@;SD>0:!MS`"AZEUKq=BD?jRCF:U8
%i](kL7S3.&c#&g+>65Pk*Tlr%e91h\HP3:E7,(PTS8m;7<]TIJ\"-5/r@-R9kZ4]A)7,kATp3@;C^4/3qao`kqQ*mo<0+W8$q.Fr
%56PR[]5Q.hEF?4bN5hAgAilZ_DZ7msk@?D>+RgA%%P+;lb][,pCR!%d^'=CRNS31^[EF-S:39V!^hK:U#k7^!]At$)a90Dfo/\D0
%'9o[^YhJ=H\Ke'o80:mpSYUEq<pEg:mIK1_'P_8.cB2*r3sMZ!M2]hW8'>b9i0)J_;0/X*V08U)ak7\;ik[!T(T=h-9OOO492[::
%SZ$QeQ-rFlGBm!jP]f<7>Y4uT8itipqTV!r*MDsK!i;I)?U%A`[.B(b"iMhVJAu.hc&L4JZp%*D'9koA5jkM58bKVg"=JL;<RCCa
%9XhDp;EGE0gM4U+pa`N9DH8i[CqX:kZeC6cB6ht[W<HsQVpa:u.qn!:H0p,5rF5BPM0?'mn+3MFO*f*a9%<fEVCF4]]qVC?8>XEn
%Co:=`XNWiY99_)XR(RV=ghs0(Dq0)&="?;Xg'K6EGgk@cmhnj);EH#GH$!4O+MDkWE8(nFDsJJ>[ega%7[8p>9353_o;AVL3Q$7o
%d8I_e1Y`6#79GG)1YdOVCX<@T&TiL!(r!DCiJsOAbF)490I/iQ,/YFo-qT2))bM-013!"GgJLimZrUYMOP2[\PYuXU4&%!\]F2Or
%Nj6d;d*?S8g8o@^r'719aPdPOfSeE9ruf4-+OhR!D.U6G6Ca1s%SBkY-G5s\;aX+=Ogi]+b4BlMCtQgJ8,"US;XGHM[nJVe\C2em
%O&GA;=N[gC)=F]Crl`(Oc%#RCol'lmpODr6nR$eBjfe[KhZ//tS,`3BhuE?+J,/UVIeV;EJ,'n1s%blYT:`jqq"rtKj$3S=cThBs
%otS6=r@^D6dm*lm00am\VuQFNrtbq^ncsX8S%nd&s7n>Jir9&CB<_[~>
%AI9_PrivateDataEnd
